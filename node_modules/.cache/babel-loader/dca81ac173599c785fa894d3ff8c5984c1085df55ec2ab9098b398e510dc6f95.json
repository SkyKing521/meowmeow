{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\skyki\\\\PycharmProjects\\\\musiceblya228\\\\src\\\\components\\\\VoiceChannel.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Box, Button, Typography, IconButton, Paper, Avatar, List, ListItem, ListItemAvatar, ListItemText, Slider, Tooltip, Badge, Divider, Alert } from '@mui/material';\nimport { Mic as MicIcon, MicOff as MicOffIcon, VolumeUp as VolumeUpIcon, VolumeOff as VolumeOffIcon, Headset as HeadsetIcon, HeadsetOff as HeadsetOffIcon, Settings as SettingsIcon, ScreenShare as ScreenShareIcon, Videocam as VideoIcon, VideocamOff as VideoOffIcon, MoreVert as MoreVertIcon } from '@mui/icons-material';\nimport { useAuth } from '../contexts/AuthContext';\nimport config from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VoiceChannel = ({\n  channelId\n}) => {\n  _s();\n  const {\n    token\n  } = useAuth();\n  const [isConnected, setIsConnected] = useState(false);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isDeafened, setIsDeafened] = useState(false);\n  const [isVideoEnabled, setIsVideoEnabled] = useState(false);\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [participants, setParticipants] = useState([]);\n  const [volume, setVolume] = useState(100);\n  const [showSettings, setShowSettings] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected'); // 'disconnected', 'connecting', 'connected'\n  const [error, setError] = useState('');\n  const [isEchoMode, setIsEchoMode] = useState(false);\n  const wsRef = useRef(null);\n  const mediaStreamRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const videoStreamRef = useRef(null);\n  const screenStreamRef = useRef(null);\n  const videoContainerRef = useRef(null);\n  const localVideoRef = useRef(null);\n  useEffect(() => {\n    connect();\n    return () => {\n      disconnect();\n    };\n  }, [channelId]); // Reconnect when channel changes\n\n  const connect = async () => {\n    try {\n      setConnectionStatus('connecting');\n      setError('');\n\n      // Get the WebSocket protocol based on the current protocol\n      const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsUrl = `${wsProtocol}//${config.SERVER_IP}:${config.SERVER_PORT}/ws/voice/${channelId}?token=${encodeURIComponent(token)}`;\n      console.log('Connecting to WebSocket:', wsUrl);\n\n      // Close existing connection if any\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n      wsRef.current = new WebSocket(wsUrl);\n\n      // Set connection timeout\n      const connectionTimeout = setTimeout(() => {\n        var _wsRef$current;\n        if (((_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.readyState) !== WebSocket.OPEN) {\n          var _wsRef$current2;\n          console.error('WebSocket connection timeout');\n          setError('Connection timeout. Please try again.');\n          (_wsRef$current2 = wsRef.current) === null || _wsRef$current2 === void 0 ? void 0 : _wsRef$current2.close();\n        }\n      }, 5000);\n\n      // Set up ping interval to keep connection alive\n      const pingInterval = setInterval(() => {\n        var _wsRef$current3;\n        if (((_wsRef$current3 = wsRef.current) === null || _wsRef$current3 === void 0 ? void 0 : _wsRef$current3.readyState) === WebSocket.OPEN) {\n          try {\n            wsRef.current.send(JSON.stringify({\n              type: 'ping'\n            }));\n          } catch (error) {\n            console.error('Error sending ping:', error);\n          }\n        }\n      }, 15000); // Send ping every 15 seconds\n\n      // Set up connection health check\n      const healthCheckInterval = setInterval(() => {\n        var _wsRef$current4;\n        if (((_wsRef$current4 = wsRef.current) === null || _wsRef$current4 === void 0 ? void 0 : _wsRef$current4.readyState) !== WebSocket.OPEN) {\n          console.log('Connection health check failed, attempting to reconnect...');\n          reconnect();\n        }\n      }, 30000); // Check connection health every 30 seconds\n\n      wsRef.current.onopen = () => {\n        console.log('WebSocket connected successfully');\n        clearTimeout(connectionTimeout);\n        setConnectionStatus('connected');\n        setIsConnected(true);\n\n        // Send join message to server\n        try {\n          wsRef.current.send(JSON.stringify({\n            type: 'join'\n          }));\n\n          // Start audio stream after successful connection\n          startAudioStream();\n        } catch (error) {\n          console.error('Error sending join message:', error);\n          setError('Failed to join voice channel. Please try again.');\n          disconnect();\n        }\n      };\n      wsRef.current.onclose = event => {\n        console.log('WebSocket closed:', event.code, event.reason);\n        clearTimeout(connectionTimeout);\n        clearInterval(pingInterval);\n        clearInterval(healthCheckInterval);\n        setConnectionStatus('disconnected');\n        setIsConnected(false);\n        stopAudioStream();\n        stopVideoStream();\n        stopScreenShare();\n\n        // Handle specific error codes\n        switch (event.code) {\n          case 4000:\n            setError('Authentication failed. Please log in again.');\n            break;\n          case 4001:\n            setError('Invalid voice channel.');\n            break;\n          case 4002:\n            setError('You are not a member of this server.');\n            break;\n          case 4003:\n            setError('User not found. Please log in again.');\n            break;\n          case 1006:\n            setError('Connection lost. Attempting to reconnect...');\n            reconnect();\n            break;\n          default:\n            setError(`Connection closed: ${event.reason || 'Unknown error'}`);\n            // Try to reconnect if the connection was lost\n            if (event.code !== 1000) {\n              reconnect();\n            }\n        }\n      };\n      wsRef.current.onerror = error => {\n        console.error('WebSocket error:', error);\n        clearTimeout(connectionTimeout);\n        clearInterval(pingInterval);\n        clearInterval(healthCheckInterval);\n        setError('Failed to connect to voice channel. Please check your internet connection and try again.');\n        setConnectionStatus('disconnected');\n        disconnect();\n      };\n      wsRef.current.onmessage = async event => {\n        if (event.data instanceof Blob) {\n          const audioData = await event.data.arrayBuffer();\n          playAudio(audioData);\n        } else {\n          try {\n            const data = JSON.parse(event.data);\n            console.log('Received WebSocket message:', data);\n\n            // Handle ping-pong\n            if (data.type === 'ping') {\n              wsRef.current.send(JSON.stringify({\n                type: 'pong'\n              }));\n              return;\n            }\n            handleWebSocketMessage(data);\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        }\n      };\n    } catch (error) {\n      console.error('Error connecting to voice channel:', error);\n      setError('Failed to connect to voice channel. Please try again later.');\n      setConnectionStatus('disconnected');\n    }\n  };\n  const handleWebSocketMessage = data => {\n    switch (data.type) {\n      case 'participants':\n        setParticipants(data.participants);\n        setIsEchoMode(data.isEchoMode);\n        break;\n      case 'participant_joined':\n        setParticipants(prev => [...prev, data.participant]);\n        setIsEchoMode(data.isEchoMode);\n        break;\n      case 'participant_left':\n        setParticipants(prev => prev.filter(p => p.id !== data.userId));\n        setIsEchoMode(data.isEchoMode);\n        break;\n      default:\n        console.log('Unknown message type:', data.type);\n    }\n  };\n  const reconnect = () => {\n    console.log('Attempting to reconnect...');\n    setTimeout(() => {\n      var _wsRef$current5;\n      if (((_wsRef$current5 = wsRef.current) === null || _wsRef$current5 === void 0 ? void 0 : _wsRef$current5.readyState) !== WebSocket.OPEN) {\n        connect();\n      }\n    }, 3000);\n  };\n  const disconnect = () => {\n    if (wsRef.current) {\n      // Send leave message before closing\n      if (wsRef.current.readyState === WebSocket.OPEN) {\n        try {\n          wsRef.current.send(JSON.stringify({\n            type: 'leave'\n          }));\n        } catch (error) {\n          console.error('Error sending leave message:', error);\n        }\n      }\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    stopAudioStream();\n    stopVideoStream();\n    stopScreenShare();\n    setIsConnected(false);\n  };\n  const startAudioStream = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaStreamRef.current = stream;\n\n      // Initialize MediaRecorder with proper audio format\n      mediaRecorderRef.current = new MediaRecorder(stream, {\n        mimeType: 'audio/webm;codecs=opus',\n        audioBitsPerSecond: 128000\n      });\n      mediaRecorderRef.current.ondataavailable = event => {\n        var _wsRef$current6;\n        if (event.data.size > 0 && ((_wsRef$current6 = wsRef.current) === null || _wsRef$current6 === void 0 ? void 0 : _wsRef$current6.readyState) === WebSocket.OPEN) {\n          // Convert Blob to ArrayBuffer before sending\n          event.data.arrayBuffer().then(buffer => {\n            wsRef.current.send(buffer);\n          });\n        }\n      };\n\n      // Start recording with smaller time slices for more frequent updates\n      mediaRecorderRef.current.start(100); // Send data every 100ms\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n    }\n  };\n  const stopAudioStream = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop();\n      mediaRecorderRef.current = null;\n    }\n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => track.stop());\n      mediaStreamRef.current = null;\n    }\n  };\n  const startVideoStream = async () => {\n    try {\n      var _wsRef$current7;\n      // Request both video and audio to ensure we have the right permissions\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          width: {\n            ideal: 1280\n          },\n          height: {\n            ideal: 720\n          },\n          facingMode: 'user'\n        },\n        audio: true\n      });\n      console.log('Video stream started:', stream.getVideoTracks()[0].label);\n      videoStreamRef.current = stream;\n      setIsVideoEnabled(true);\n\n      // Send video stream to other participants\n      if (((_wsRef$current7 = wsRef.current) === null || _wsRef$current7 === void 0 ? void 0 : _wsRef$current7.readyState) === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'video_start',\n          userId: localStorage.getItem('userId')\n        }));\n      }\n\n      // Set the stream to the video element\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n      }\n    } catch (error) {\n      console.error('Error accessing camera:', error);\n      setError('Failed to access camera. Please make sure you have granted camera permissions.');\n      setIsVideoEnabled(false);\n    }\n  };\n  const stopVideoStream = () => {\n    if (videoStreamRef.current) {\n      var _wsRef$current8;\n      videoStreamRef.current.getTracks().forEach(track => track.stop());\n      videoStreamRef.current = null;\n      setIsVideoEnabled(false);\n      if (((_wsRef$current8 = wsRef.current) === null || _wsRef$current8 === void 0 ? void 0 : _wsRef$current8.readyState) === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'video_stop',\n          userId: localStorage.getItem('userId')\n        }));\n      }\n\n      // Clear the video stream\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = null;\n      }\n    }\n  };\n  const startScreenShare = async () => {\n    try {\n      var _wsRef$current9;\n      const stream = await navigator.mediaDevices.getDisplayMedia({\n        video: true\n      });\n      screenStreamRef.current = stream;\n      setIsScreenSharing(true);\n      if (((_wsRef$current9 = wsRef.current) === null || _wsRef$current9 === void 0 ? void 0 : _wsRef$current9.readyState) === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'screen_share_start',\n          userId: localStorage.getItem('userId')\n        }));\n      }\n    } catch (error) {\n      console.error('Error sharing screen:', error);\n    }\n  };\n  const stopScreenShare = () => {\n    if (screenStreamRef.current) {\n      var _wsRef$current0;\n      screenStreamRef.current.getTracks().forEach(track => track.stop());\n      screenStreamRef.current = null;\n      setIsScreenSharing(false);\n      if (((_wsRef$current0 = wsRef.current) === null || _wsRef$current0 === void 0 ? void 0 : _wsRef$current0.readyState) === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'screen_share_stop',\n          userId: localStorage.getItem('userId')\n        }));\n      }\n    }\n  };\n  const playAudio = async audioData => {\n    try {\n      if (!audioContextRef.current) {\n        audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      }\n\n      // Create a Blob from the received ArrayBuffer\n      const blob = new Blob([audioData], {\n        type: 'audio/webm;codecs=opus'\n      });\n\n      // Create an audio element to decode the blob\n      const audioElement = new Audio();\n      audioElement.src = URL.createObjectURL(blob);\n\n      // Connect the audio element to the audio context\n      const source = audioContextRef.current.createMediaElementSource(audioElement);\n      const gainNode = audioContextRef.current.createGain();\n      gainNode.gain.value = volume / 100;\n      source.connect(gainNode);\n      gainNode.connect(audioContextRef.current.destination);\n\n      // Play the audio\n      await audioElement.play();\n\n      // Clean up\n      audioElement.onended = () => {\n        URL.revokeObjectURL(audioElement.src);\n      };\n    } catch (error) {\n      console.error('Error playing audio:', error);\n    }\n  };\n  const toggleMute = () => {\n    if (mediaStreamRef.current) {\n      const audioTrack = mediaStreamRef.current.getAudioTracks()[0];\n      audioTrack.enabled = !audioTrack.enabled;\n      setIsMuted(!isMuted);\n    }\n  };\n  const toggleDeafen = () => {\n    setIsDeafened(!isDeafened);\n    if (audioContextRef.current) {\n      audioContextRef.current.destination.volume = isDeafened ? volume / 100 : 0;\n    }\n  };\n  const toggleVideo = () => {\n    if (isVideoEnabled) {\n      stopVideoStream();\n    } else {\n      startVideoStream();\n    }\n  };\n  const toggleScreenShare = () => {\n    if (isScreenSharing) {\n      stopScreenShare();\n    } else {\n      startScreenShare();\n    }\n  };\n  const handleVolumeChange = (event, newValue) => {\n    setVolume(newValue);\n    if (audioContextRef.current && !isDeafened) {\n      audioContextRef.current.destination.volume = newValue / 100;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100%',\n      bgcolor: 'background.paper'\n    },\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 17\n    }, this), connectionStatus === 'connecting' && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"info\",\n      sx: {\n        mb: 2\n      },\n      children: \"Connecting to voice channel...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 17\n    }, this), isEchoMode && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"info\",\n      sx: {\n        mb: 2\n      },\n      children: \"Echo Mode Active - You are the only participant in this voice channel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      ref: videoContainerRef,\n      sx: {\n        p: 2,\n        display: 'flex',\n        justifyContent: 'center',\n        bgcolor: 'background.default'\n      },\n      children: isVideoEnabled ? /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: localVideoRef,\n        autoPlay: true,\n        muted: true,\n        playsInline: true,\n        style: {\n          width: '100%',\n          maxHeight: '200px',\n          objectFit: 'cover',\n          borderRadius: '8px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        children: \"Camera is disabled\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      sx: {\n        flex: 1,\n        overflow: 'auto'\n      },\n      children: participants.map(participant => /*#__PURE__*/_jsxDEV(ListItem, {\n        children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n          children: /*#__PURE__*/_jsxDEV(Badge, {\n            overlap: \"circular\",\n            anchorOrigin: {\n              vertical: 'bottom',\n              horizontal: 'right'\n            },\n            badgeContent: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                width: 12,\n                height: 12,\n                borderRadius: '50%',\n                bgcolor: participant.isMuted ? 'error.main' : 'success.main',\n                border: '2px solid',\n                borderColor: 'background.paper'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 518,\n              columnNumber: 37\n            }, this),\n            children: /*#__PURE__*/_jsxDEV(Avatar, {\n              children: participant.username[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 528,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: participant.username,\n          secondary: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              alignItems: 'center',\n              gap: 1\n            },\n            children: [participant.isMuted && /*#__PURE__*/_jsxDEV(MicOffIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 535,\n              columnNumber: 61\n            }, this), participant.isDeafened && /*#__PURE__*/_jsxDEV(HeadsetOffIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 64\n            }, this), participant.isVideoEnabled && /*#__PURE__*/_jsxDEV(VideoIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 68\n            }, this), participant.isScreenSharing && /*#__PURE__*/_jsxDEV(ScreenShareIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 69\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 25\n        }, this)]\n      }, participant.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 2,\n        borderTop: 1,\n        borderColor: 'divider',\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          gap: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n          title: isMuted ? \"Unmute\" : \"Mute\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: toggleMute,\n            color: isMuted ? \"error\" : \"default\",\n            children: isMuted ? /*#__PURE__*/_jsxDEV(MicOffIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 558,\n              columnNumber: 40\n            }, this) : /*#__PURE__*/_jsxDEV(MicIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 558,\n              columnNumber: 57\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 557,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: isDeafened ? \"Undeafen\" : \"Deafen\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: toggleDeafen,\n            color: isDeafened ? \"error\" : \"default\",\n            children: isDeafened ? /*#__PURE__*/_jsxDEV(HeadsetOffIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 563,\n              columnNumber: 43\n            }, this) : /*#__PURE__*/_jsxDEV(HeadsetIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 563,\n              columnNumber: 64\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          gap: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n          title: isVideoEnabled ? \"Disable Video\" : \"Enable Video\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: toggleVideo,\n            color: isVideoEnabled ? \"primary\" : \"default\",\n            children: isVideoEnabled ? /*#__PURE__*/_jsxDEV(VideoIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 571,\n              columnNumber: 47\n            }, this) : /*#__PURE__*/_jsxDEV(VideoOffIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 571,\n              columnNumber: 63\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: isScreenSharing ? \"Stop Sharing\" : \"Share Screen\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: toggleScreenShare,\n            color: isScreenSharing ? \"primary\" : \"default\",\n            children: /*#__PURE__*/_jsxDEV(ScreenShareIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 576,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: 1,\n          minWidth: 200\n        },\n        children: [/*#__PURE__*/_jsxDEV(VolumeUpIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Slider, {\n          value: volume,\n          onChange: handleVolumeChange,\n          \"aria-labelledby\": \"volume-slider\",\n          min: 0,\n          max: 100\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 454,\n    columnNumber: 9\n  }, this);\n};\n_s(VoiceChannel, \"ztexQ0uazyEaYJvPRax6ksH+Axc=\", false, function () {\n  return [useAuth];\n});\n_c = VoiceChannel;\nexport default VoiceChannel;\nvar _c;\n$RefreshReg$(_c, \"VoiceChannel\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Box","Button","Typography","IconButton","Paper","Avatar","List","ListItem","ListItemAvatar","ListItemText","Slider","Tooltip","Badge","Divider","Alert","Mic","MicIcon","MicOff","MicOffIcon","VolumeUp","VolumeUpIcon","VolumeOff","VolumeOffIcon","Headset","HeadsetIcon","HeadsetOff","HeadsetOffIcon","Settings","SettingsIcon","ScreenShare","ScreenShareIcon","Videocam","VideoIcon","VideocamOff","VideoOffIcon","MoreVert","MoreVertIcon","useAuth","config","jsxDEV","_jsxDEV","VoiceChannel","channelId","_s","token","isConnected","setIsConnected","isMuted","setIsMuted","isDeafened","setIsDeafened","isVideoEnabled","setIsVideoEnabled","isScreenSharing","setIsScreenSharing","participants","setParticipants","volume","setVolume","showSettings","setShowSettings","connectionStatus","setConnectionStatus","error","setError","isEchoMode","setIsEchoMode","wsRef","mediaStreamRef","audioContextRef","mediaRecorderRef","videoStreamRef","screenStreamRef","videoContainerRef","localVideoRef","connect","disconnect","wsProtocol","window","location","protocol","wsUrl","SERVER_IP","SERVER_PORT","encodeURIComponent","console","log","current","close","WebSocket","connectionTimeout","setTimeout","_wsRef$current","readyState","OPEN","_wsRef$current2","pingInterval","setInterval","_wsRef$current3","send","JSON","stringify","type","healthCheckInterval","_wsRef$current4","reconnect","onopen","clearTimeout","startAudioStream","onclose","event","code","reason","clearInterval","stopAudioStream","stopVideoStream","stopScreenShare","onerror","onmessage","data","Blob","audioData","arrayBuffer","playAudio","parse","handleWebSocketMessage","prev","participant","filter","p","id","userId","_wsRef$current5","stream","navigator","mediaDevices","getUserMedia","audio","MediaRecorder","mimeType","audioBitsPerSecond","ondataavailable","_wsRef$current6","size","then","buffer","start","stop","getTracks","forEach","track","startVideoStream","_wsRef$current7","video","width","ideal","height","facingMode","getVideoTracks","label","localStorage","getItem","srcObject","_wsRef$current8","startScreenShare","_wsRef$current9","getDisplayMedia","_wsRef$current0","AudioContext","webkitAudioContext","blob","audioElement","Audio","src","URL","createObjectURL","source","createMediaElementSource","gainNode","createGain","gain","value","destination","play","onended","revokeObjectURL","toggleMute","audioTrack","getAudioTracks","enabled","toggleDeafen","toggleVideo","toggleScreenShare","handleVolumeChange","newValue","sx","display","flexDirection","bgcolor","children","severity","mb","fileName","_jsxFileName","lineNumber","columnNumber","ref","justifyContent","autoPlay","muted","playsInline","style","maxHeight","objectFit","borderRadius","variant","color","flex","overflow","map","overlap","anchorOrigin","vertical","horizontal","badgeContent","border","borderColor","username","primary","secondary","alignItems","gap","fontSize","borderTop","title","onClick","minWidth","onChange","min","max","_c","$RefreshReg$"],"sources":["C:/Users/skyki/PycharmProjects/musiceblya228/src/components/VoiceChannel.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Typography,\r\n    IconButton,\r\n    Paper,\r\n    Avatar,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    Slider,\r\n    Tooltip,\r\n    Badge,\r\n    Divider,\r\n    Alert\r\n} from '@mui/material';\r\nimport {\r\n    Mic as MicIcon,\r\n    MicOff as MicOffIcon,\r\n    VolumeUp as VolumeUpIcon,\r\n    VolumeOff as VolumeOffIcon,\r\n    Headset as HeadsetIcon,\r\n    HeadsetOff as HeadsetOffIcon,\r\n    Settings as SettingsIcon,\r\n    ScreenShare as ScreenShareIcon,\r\n    Videocam as VideoIcon,\r\n    VideocamOff as VideoOffIcon,\r\n    MoreVert as MoreVertIcon\r\n} from '@mui/icons-material';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport config from '../config';\r\n\r\nconst VoiceChannel = ({ channelId }) => {\r\n    const { token } = useAuth();\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const [isMuted, setIsMuted] = useState(false);\r\n    const [isDeafened, setIsDeafened] = useState(false);\r\n    const [isVideoEnabled, setIsVideoEnabled] = useState(false);\r\n    const [isScreenSharing, setIsScreenSharing] = useState(false);\r\n    const [participants, setParticipants] = useState([]);\r\n    const [volume, setVolume] = useState(100);\r\n    const [showSettings, setShowSettings] = useState(false);\r\n    const [connectionStatus, setConnectionStatus] = useState('disconnected'); // 'disconnected', 'connecting', 'connected'\r\n    const [error, setError] = useState('');\r\n    const [isEchoMode, setIsEchoMode] = useState(false);\r\n    \r\n    const wsRef = useRef(null);\r\n    const mediaStreamRef = useRef(null);\r\n    const audioContextRef = useRef(null);\r\n    const mediaRecorderRef = useRef(null);\r\n    const videoStreamRef = useRef(null);\r\n    const screenStreamRef = useRef(null);\r\n    const videoContainerRef = useRef(null);\r\n    const localVideoRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        connect();\r\n        return () => {\r\n            disconnect();\r\n        };\r\n    }, [channelId]); // Reconnect when channel changes\r\n\r\n    const connect = async () => {\r\n        try {\r\n            setConnectionStatus('connecting');\r\n            setError('');\r\n\r\n            // Get the WebSocket protocol based on the current protocol\r\n            const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n            const wsUrl = `${wsProtocol}//${config.SERVER_IP}:${config.SERVER_PORT}/ws/voice/${channelId}?token=${encodeURIComponent(token)}`;\r\n            \r\n            console.log('Connecting to WebSocket:', wsUrl);\r\n            \r\n            // Close existing connection if any\r\n            if (wsRef.current) {\r\n                wsRef.current.close();\r\n            }\r\n            \r\n            wsRef.current = new WebSocket(wsUrl);\r\n\r\n            // Set connection timeout\r\n            const connectionTimeout = setTimeout(() => {\r\n                if (wsRef.current?.readyState !== WebSocket.OPEN) {\r\n                    console.error('WebSocket connection timeout');\r\n                    setError('Connection timeout. Please try again.');\r\n                    wsRef.current?.close();\r\n                }\r\n            }, 5000);\r\n\r\n            // Set up ping interval to keep connection alive\r\n            const pingInterval = setInterval(() => {\r\n                if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n                    try {\r\n                        wsRef.current.send(JSON.stringify({ type: 'ping' }));\r\n                    } catch (error) {\r\n                        console.error('Error sending ping:', error);\r\n                    }\r\n                }\r\n            }, 15000); // Send ping every 15 seconds\r\n\r\n            // Set up connection health check\r\n            const healthCheckInterval = setInterval(() => {\r\n                if (wsRef.current?.readyState !== WebSocket.OPEN) {\r\n                    console.log('Connection health check failed, attempting to reconnect...');\r\n                    reconnect();\r\n                }\r\n            }, 30000); // Check connection health every 30 seconds\r\n\r\n            wsRef.current.onopen = () => {\r\n                console.log('WebSocket connected successfully');\r\n                clearTimeout(connectionTimeout);\r\n                setConnectionStatus('connected');\r\n                setIsConnected(true);\r\n                \r\n                // Send join message to server\r\n                try {\r\n                    wsRef.current.send(JSON.stringify({\r\n                        type: 'join'\r\n                    }));\r\n                    \r\n                    // Start audio stream after successful connection\r\n                    startAudioStream();\r\n                } catch (error) {\r\n                    console.error('Error sending join message:', error);\r\n                    setError('Failed to join voice channel. Please try again.');\r\n                    disconnect();\r\n                }\r\n            };\r\n\r\n            wsRef.current.onclose = (event) => {\r\n                console.log('WebSocket closed:', event.code, event.reason);\r\n                clearTimeout(connectionTimeout);\r\n                clearInterval(pingInterval);\r\n                clearInterval(healthCheckInterval);\r\n                setConnectionStatus('disconnected');\r\n                setIsConnected(false);\r\n                stopAudioStream();\r\n                stopVideoStream();\r\n                stopScreenShare();\r\n                \r\n                // Handle specific error codes\r\n                switch (event.code) {\r\n                    case 4000:\r\n                        setError('Authentication failed. Please log in again.');\r\n                        break;\r\n                    case 4001:\r\n                        setError('Invalid voice channel.');\r\n                        break;\r\n                    case 4002:\r\n                        setError('You are not a member of this server.');\r\n                        break;\r\n                    case 4003:\r\n                        setError('User not found. Please log in again.');\r\n                        break;\r\n                    case 1006:\r\n                        setError('Connection lost. Attempting to reconnect...');\r\n                        reconnect();\r\n                        break;\r\n                    default:\r\n                        setError(`Connection closed: ${event.reason || 'Unknown error'}`);\r\n                        // Try to reconnect if the connection was lost\r\n                        if (event.code !== 1000) {\r\n                            reconnect();\r\n                        }\r\n                }\r\n            };\r\n\r\n            wsRef.current.onerror = (error) => {\r\n                console.error('WebSocket error:', error);\r\n                clearTimeout(connectionTimeout);\r\n                clearInterval(pingInterval);\r\n                clearInterval(healthCheckInterval);\r\n                setError('Failed to connect to voice channel. Please check your internet connection and try again.');\r\n                setConnectionStatus('disconnected');\r\n                disconnect();\r\n            };\r\n\r\n            wsRef.current.onmessage = async (event) => {\r\n                if (event.data instanceof Blob) {\r\n                    const audioData = await event.data.arrayBuffer();\r\n                    playAudio(audioData);\r\n                } else {\r\n                    try {\r\n                        const data = JSON.parse(event.data);\r\n                        console.log('Received WebSocket message:', data);\r\n                        \r\n                        // Handle ping-pong\r\n                        if (data.type === 'ping') {\r\n                            wsRef.current.send(JSON.stringify({ type: 'pong' }));\r\n                            return;\r\n                        }\r\n                        \r\n                        handleWebSocketMessage(data);\r\n                    } catch (error) {\r\n                        console.error('Error parsing WebSocket message:', error);\r\n                    }\r\n                }\r\n            };\r\n        } catch (error) {\r\n            console.error('Error connecting to voice channel:', error);\r\n            setError('Failed to connect to voice channel. Please try again later.');\r\n            setConnectionStatus('disconnected');\r\n        }\r\n    };\r\n\r\n    const handleWebSocketMessage = (data) => {\r\n        switch (data.type) {\r\n            case 'participants':\r\n                setParticipants(data.participants);\r\n                setIsEchoMode(data.isEchoMode);\r\n                break;\r\n            case 'participant_joined':\r\n                setParticipants(prev => [...prev, data.participant]);\r\n                setIsEchoMode(data.isEchoMode);\r\n                break;\r\n            case 'participant_left':\r\n                setParticipants(prev => prev.filter(p => p.id !== data.userId));\r\n                setIsEchoMode(data.isEchoMode);\r\n                break;\r\n            default:\r\n                console.log('Unknown message type:', data.type);\r\n        }\r\n    };\r\n\r\n    const reconnect = () => {\r\n        console.log('Attempting to reconnect...');\r\n        setTimeout(() => {\r\n            if (wsRef.current?.readyState !== WebSocket.OPEN) {\r\n                connect();\r\n            }\r\n        }, 3000);\r\n    };\r\n\r\n    const disconnect = () => {\r\n        if (wsRef.current) {\r\n            // Send leave message before closing\r\n            if (wsRef.current.readyState === WebSocket.OPEN) {\r\n                try {\r\n                    wsRef.current.send(JSON.stringify({\r\n                        type: 'leave'\r\n                    }));\r\n                } catch (error) {\r\n                    console.error('Error sending leave message:', error);\r\n                }\r\n            }\r\n            wsRef.current.close();\r\n            wsRef.current = null;\r\n        }\r\n        stopAudioStream();\r\n        stopVideoStream();\r\n        stopScreenShare();\r\n        setIsConnected(false);\r\n    };\r\n\r\n    const startAudioStream = async () => {\r\n        try {\r\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n            mediaStreamRef.current = stream;\r\n\r\n            // Initialize MediaRecorder with proper audio format\r\n            mediaRecorderRef.current = new MediaRecorder(stream, {\r\n                mimeType: 'audio/webm;codecs=opus',\r\n                audioBitsPerSecond: 128000\r\n            });\r\n\r\n            mediaRecorderRef.current.ondataavailable = (event) => {\r\n                if (event.data.size > 0 && wsRef.current?.readyState === WebSocket.OPEN) {\r\n                    // Convert Blob to ArrayBuffer before sending\r\n                    event.data.arrayBuffer().then(buffer => {\r\n                        wsRef.current.send(buffer);\r\n                    });\r\n                }\r\n            };\r\n\r\n            // Start recording with smaller time slices for more frequent updates\r\n            mediaRecorderRef.current.start(100); // Send data every 100ms\r\n        } catch (error) {\r\n            console.error('Error accessing microphone:', error);\r\n        }\r\n    };\r\n\r\n    const stopAudioStream = () => {\r\n        if (mediaRecorderRef.current) {\r\n            mediaRecorderRef.current.stop();\r\n            mediaRecorderRef.current = null;\r\n        }\r\n        if (mediaStreamRef.current) {\r\n            mediaStreamRef.current.getTracks().forEach(track => track.stop());\r\n            mediaStreamRef.current = null;\r\n        }\r\n    };\r\n\r\n    const startVideoStream = async () => {\r\n        try {\r\n            // Request both video and audio to ensure we have the right permissions\r\n            const stream = await navigator.mediaDevices.getUserMedia({ \r\n                video: {\r\n                    width: { ideal: 1280 },\r\n                    height: { ideal: 720 },\r\n                    facingMode: 'user'\r\n                },\r\n                audio: true \r\n            });\r\n            \r\n            console.log('Video stream started:', stream.getVideoTracks()[0].label);\r\n            videoStreamRef.current = stream;\r\n            setIsVideoEnabled(true);\r\n            \r\n            // Send video stream to other participants\r\n            if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n                wsRef.current.send(JSON.stringify({\r\n                    type: 'video_start',\r\n                    userId: localStorage.getItem('userId')\r\n                }));\r\n            }\r\n\r\n            // Set the stream to the video element\r\n            if (localVideoRef.current) {\r\n                localVideoRef.current.srcObject = stream;\r\n            }\r\n        } catch (error) {\r\n            console.error('Error accessing camera:', error);\r\n            setError('Failed to access camera. Please make sure you have granted camera permissions.');\r\n            setIsVideoEnabled(false);\r\n        }\r\n    };\r\n\r\n    const stopVideoStream = () => {\r\n        if (videoStreamRef.current) {\r\n            videoStreamRef.current.getTracks().forEach(track => track.stop());\r\n            videoStreamRef.current = null;\r\n            setIsVideoEnabled(false);\r\n            \r\n            if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n                wsRef.current.send(JSON.stringify({\r\n                    type: 'video_stop',\r\n                    userId: localStorage.getItem('userId')\r\n                }));\r\n            }\r\n\r\n            // Clear the video stream\r\n            if (localVideoRef.current) {\r\n                localVideoRef.current.srcObject = null;\r\n            }\r\n        }\r\n    };\r\n\r\n    const startScreenShare = async () => {\r\n        try {\r\n            const stream = await navigator.mediaDevices.getDisplayMedia({ video: true });\r\n            screenStreamRef.current = stream;\r\n            setIsScreenSharing(true);\r\n            \r\n            if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n                wsRef.current.send(JSON.stringify({\r\n                    type: 'screen_share_start',\r\n                    userId: localStorage.getItem('userId')\r\n                }));\r\n            }\r\n        } catch (error) {\r\n            console.error('Error sharing screen:', error);\r\n        }\r\n    };\r\n\r\n    const stopScreenShare = () => {\r\n        if (screenStreamRef.current) {\r\n            screenStreamRef.current.getTracks().forEach(track => track.stop());\r\n            screenStreamRef.current = null;\r\n            setIsScreenSharing(false);\r\n            \r\n            if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n                wsRef.current.send(JSON.stringify({\r\n                    type: 'screen_share_stop',\r\n                    userId: localStorage.getItem('userId')\r\n                }));\r\n            }\r\n        }\r\n    };\r\n\r\n    const playAudio = async (audioData) => {\r\n        try {\r\n            if (!audioContextRef.current) {\r\n                audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\r\n            }\r\n\r\n            // Create a Blob from the received ArrayBuffer\r\n            const blob = new Blob([audioData], { type: 'audio/webm;codecs=opus' });\r\n            \r\n            // Create an audio element to decode the blob\r\n            const audioElement = new Audio();\r\n            audioElement.src = URL.createObjectURL(blob);\r\n            \r\n            // Connect the audio element to the audio context\r\n            const source = audioContextRef.current.createMediaElementSource(audioElement);\r\n            const gainNode = audioContextRef.current.createGain();\r\n            gainNode.gain.value = volume / 100;\r\n            \r\n            source.connect(gainNode);\r\n            gainNode.connect(audioContextRef.current.destination);\r\n            \r\n            // Play the audio\r\n            await audioElement.play();\r\n            \r\n            // Clean up\r\n            audioElement.onended = () => {\r\n                URL.revokeObjectURL(audioElement.src);\r\n            };\r\n        } catch (error) {\r\n            console.error('Error playing audio:', error);\r\n        }\r\n    };\r\n\r\n    const toggleMute = () => {\r\n        if (mediaStreamRef.current) {\r\n            const audioTrack = mediaStreamRef.current.getAudioTracks()[0];\r\n            audioTrack.enabled = !audioTrack.enabled;\r\n            setIsMuted(!isMuted);\r\n        }\r\n    };\r\n\r\n    const toggleDeafen = () => {\r\n        setIsDeafened(!isDeafened);\r\n        if (audioContextRef.current) {\r\n            audioContextRef.current.destination.volume = isDeafened ? volume / 100 : 0;\r\n        }\r\n    };\r\n\r\n    const toggleVideo = () => {\r\n        if (isVideoEnabled) {\r\n            stopVideoStream();\r\n        } else {\r\n            startVideoStream();\r\n        }\r\n    };\r\n\r\n    const toggleScreenShare = () => {\r\n        if (isScreenSharing) {\r\n            stopScreenShare();\r\n        } else {\r\n            startScreenShare();\r\n        }\r\n    };\r\n\r\n    const handleVolumeChange = (event, newValue) => {\r\n        setVolume(newValue);\r\n        if (audioContextRef.current && !isDeafened) {\r\n            audioContextRef.current.destination.volume = newValue / 100;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ \r\n            display: 'flex', \r\n            flexDirection: 'column',\r\n            height: '100%',\r\n            bgcolor: 'background.paper'\r\n        }}>\r\n            {/* Connection Status */}\r\n            {error && (\r\n                <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                    {error}\r\n                </Alert>\r\n            )}\r\n            \r\n            {connectionStatus === 'connecting' && (\r\n                <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                    Connecting to voice channel...\r\n                </Alert>\r\n            )}\r\n\r\n            {isEchoMode && (\r\n                <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                    Echo Mode Active - You are the only participant in this voice channel\r\n                </Alert>\r\n            )}\r\n\r\n            {/* Video Container */}\r\n            <Box \r\n                ref={videoContainerRef}\r\n                sx={{ \r\n                    p: 2, \r\n                    display: 'flex', \r\n                    justifyContent: 'center',\r\n                    bgcolor: 'background.default'\r\n                }}\r\n            >\r\n                {isVideoEnabled ? (\r\n                    <video\r\n                        ref={localVideoRef}\r\n                        autoPlay\r\n                        muted\r\n                        playsInline\r\n                        style={{\r\n                            width: '100%',\r\n                            maxHeight: '200px',\r\n                            objectFit: 'cover',\r\n                            borderRadius: '8px'\r\n                        }}\r\n                    />\r\n                ) : (\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Camera is disabled\r\n                    </Typography>\r\n                )}\r\n            </Box>\r\n\r\n            {/* Participants List */}\r\n            <List sx={{ flex: 1, overflow: 'auto' }}>\r\n                {participants.map((participant) => (\r\n                    <ListItem key={participant.id}>\r\n                        <ListItemAvatar>\r\n                            <Badge\r\n                                overlap=\"circular\"\r\n                                anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n                                badgeContent={\r\n                                    <Box sx={{ \r\n                                        width: 12, \r\n                                        height: 12, \r\n                                        borderRadius: '50%',\r\n                                        bgcolor: participant.isMuted ? 'error.main' : 'success.main',\r\n                                        border: '2px solid',\r\n                                        borderColor: 'background.paper'\r\n                                    }} />\r\n                                }\r\n                            >\r\n                                <Avatar>{participant.username[0]}</Avatar>\r\n                            </Badge>\r\n                        </ListItemAvatar>\r\n                        <ListItemText \r\n                            primary={participant.username}\r\n                            secondary={\r\n                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                                    {participant.isMuted && <MicOffIcon fontSize=\"small\" />}\r\n                                    {participant.isDeafened && <HeadsetOffIcon fontSize=\"small\" />}\r\n                                    {participant.isVideoEnabled && <VideoIcon fontSize=\"small\" />}\r\n                                    {participant.isScreenSharing && <ScreenShareIcon fontSize=\"small\" />}\r\n                                </Box>\r\n                            }\r\n                        />\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n\r\n            {/* Controls */}\r\n            <Box sx={{ \r\n                p: 2, \r\n                borderTop: 1, \r\n                borderColor: 'divider',\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center'\r\n            }}>\r\n                <Box sx={{ display: 'flex', gap: 1 }}>\r\n                    <Tooltip title={isMuted ? \"Unmute\" : \"Mute\"}>\r\n                        <IconButton onClick={toggleMute} color={isMuted ? \"error\" : \"default\"}>\r\n                            {isMuted ? <MicOffIcon /> : <MicIcon />}\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title={isDeafened ? \"Undeafen\" : \"Deafen\"}>\r\n                        <IconButton onClick={toggleDeafen} color={isDeafened ? \"error\" : \"default\"}>\r\n                            {isDeafened ? <HeadsetOffIcon /> : <HeadsetIcon />}\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </Box>\r\n\r\n                <Box sx={{ display: 'flex', gap: 1 }}>\r\n                    <Tooltip title={isVideoEnabled ? \"Disable Video\" : \"Enable Video\"}>\r\n                        <IconButton onClick={toggleVideo} color={isVideoEnabled ? \"primary\" : \"default\"}>\r\n                            {isVideoEnabled ? <VideoIcon /> : <VideoOffIcon />}\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title={isScreenSharing ? \"Stop Sharing\" : \"Share Screen\"}>\r\n                        <IconButton onClick={toggleScreenShare} color={isScreenSharing ? \"primary\" : \"default\"}>\r\n                            <ScreenShareIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </Box>\r\n\r\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, minWidth: 200 }}>\r\n                    <VolumeUpIcon />\r\n                    <Slider\r\n                        value={volume}\r\n                        onChange={handleVolumeChange}\r\n                        aria-labelledby=\"volume-slider\"\r\n                        min={0}\r\n                        max={100}\r\n                    />\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default VoiceChannel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}