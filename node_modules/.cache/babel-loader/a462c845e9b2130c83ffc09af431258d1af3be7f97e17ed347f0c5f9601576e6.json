{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\skyki\\\\PycharmProjects\\\\musiceblya228\\\\src\\\\components\\\\VoiceChannel.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Box, Button, Typography, IconButton, Paper, Avatar, List, ListItem, ListItemAvatar, ListItemText, Slider, Tooltip, Badge, Divider, Alert } from '@mui/material';\nimport { Mic as MicIcon, MicOff as MicOffIcon, VolumeUp as VolumeUpIcon, VolumeOff as VolumeOffIcon, Headset as HeadsetIcon, HeadsetOff as HeadsetOffIcon, Settings as SettingsIcon, ScreenShare as ScreenShareIcon, Videocam as VideoIcon, VideocamOff as VideoOffIcon, MoreVert as MoreVertIcon } from '@mui/icons-material';\nimport { useAuth } from '../contexts/AuthContext';\nimport config from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VoiceChannel = ({\n  channelId\n}) => {\n  _s();\n  const {\n    token\n  } = useAuth();\n  const [isConnected, setIsConnected] = useState(false);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isDeafened, setIsDeafened] = useState(false);\n  const [isVideoEnabled, setIsVideoEnabled] = useState(false);\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [participants, setParticipants] = useState([]);\n  const [volume, setVolume] = useState(100);\n  const [showSettings, setShowSettings] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected'); // 'disconnected', 'connecting', 'connected'\n  const [error, setError] = useState('');\n  const [isEchoMode, setIsEchoMode] = useState(false);\n  const wsRef = useRef(null);\n  const mediaStreamRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const videoStreamRef = useRef(null);\n  const screenStreamRef = useRef(null);\n  const videoContainerRef = useRef(null);\n  const localVideoRef = useRef(null);\n  useEffect(() => {\n    connect();\n    return () => {\n      disconnect();\n    };\n  }, [channelId]); // Reconnect when channel changes\n\n  const connect = async () => {\n    try {\n      setConnectionStatus('connecting');\n      setError('');\n\n      // Get the WebSocket protocol based on the current protocol\n      const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsUrl = `${wsProtocol}//${config.SERVER_IP}:${config.SERVER_PORT}/ws/voice/${channelId}?token=${encodeURIComponent(token)}`;\n      console.log('Connecting to WebSocket:', wsUrl);\n\n      // Close existing connection if any\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n      wsRef.current = new WebSocket(wsUrl);\n\n      // Set connection timeout\n      const connectionTimeout = setTimeout(() => {\n        var _wsRef$current;\n        if (((_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.readyState) !== WebSocket.OPEN) {\n          var _wsRef$current2;\n          console.error('WebSocket connection timeout');\n          setError('Connection timeout. Please try again.');\n          (_wsRef$current2 = wsRef.current) === null || _wsRef$current2 === void 0 ? void 0 : _wsRef$current2.close();\n        }\n      }, 5000);\n\n      // Set up ping interval to keep connection alive\n      const pingInterval = setInterval(() => {\n        var _wsRef$current3;\n        if (((_wsRef$current3 = wsRef.current) === null || _wsRef$current3 === void 0 ? void 0 : _wsRef$current3.readyState) === WebSocket.OPEN) {\n          try {\n            wsRef.current.send(JSON.stringify({\n              type: 'ping'\n            }));\n            console.log('Sent ping message');\n          } catch (error) {\n            console.error('Error sending ping:', error);\n          }\n        }\n      }, 15000);\n\n      // Set up connection health check\n      const healthCheckInterval = setInterval(() => {\n        var _wsRef$current4;\n        if (((_wsRef$current4 = wsRef.current) === null || _wsRef$current4 === void 0 ? void 0 : _wsRef$current4.readyState) !== WebSocket.OPEN) {\n          console.log('Connection health check failed, attempting to reconnect...');\n          reconnect();\n        }\n      }, 30000);\n      wsRef.current.onopen = async () => {\n        console.log('WebSocket connected successfully');\n        clearTimeout(connectionTimeout);\n        setConnectionStatus('connected');\n        setIsConnected(true);\n\n        // Send join message to server\n        try {\n          var _wsRef$current5;\n          if (((_wsRef$current5 = wsRef.current) === null || _wsRef$current5 === void 0 ? void 0 : _wsRef$current5.readyState) === WebSocket.OPEN) {\n            wsRef.current.send(JSON.stringify({\n              type: 'join'\n            }));\n            console.log('Sent join message');\n\n            // Start audio stream after successful connection\n            await startAudioStream();\n          }\n        } catch (error) {\n          console.error('Error sending join message:', error);\n          setError('Failed to join voice channel. Please try again.');\n          disconnect();\n        }\n      };\n      wsRef.current.onclose = event => {\n        console.log('WebSocket closed:', event.code, event.reason);\n        clearTimeout(connectionTimeout);\n        clearInterval(pingInterval);\n        clearInterval(healthCheckInterval);\n        setConnectionStatus('disconnected');\n        setIsConnected(false);\n        stopAudioStream();\n        stopVideoStream();\n        stopScreenShare();\n\n        // Handle specific error codes\n        switch (event.code) {\n          case 4000:\n            setError('Authentication failed. Please log in again.');\n            break;\n          case 4001:\n            setError('Invalid voice channel.');\n            break;\n          case 4002:\n            setError('You are not a member of this server.');\n            break;\n          case 4003:\n            setError('User not found. Please log in again.');\n            break;\n          case 1006:\n            setError('Connection lost. Attempting to reconnect...');\n            reconnect();\n            break;\n          default:\n            setError(`Connection closed: ${event.reason || 'Unknown error'}`);\n            // Try to reconnect if the connection was lost\n            if (event.code !== 1000) {\n              reconnect();\n            }\n        }\n      };\n      wsRef.current.onerror = error => {\n        console.error('WebSocket error:', error);\n        // Don't clear intervals or disconnect on error\n        // Let the onclose handler handle the cleanup\n      };\n      wsRef.current.onmessage = async event => {\n        if (event.data instanceof Blob) {\n          try {\n            // Handle the blob directly without converting to ArrayBuffer\n            playAudio(event.data).catch(error => {\n              console.error('Audio playback failed:', error);\n            });\n          } catch (error) {\n            console.error('Error processing audio data:', error);\n          }\n        } else {\n          try {\n            const data = JSON.parse(event.data);\n            console.log('Received WebSocket message:', data);\n            if (data.type === 'ping') {\n              try {\n                wsRef.current.send(JSON.stringify({\n                  type: 'pong'\n                }));\n                console.log('Sent pong response');\n              } catch (error) {\n                console.error('Error sending pong:', error);\n              }\n              return;\n            }\n            handleWebSocketMessage(data);\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        }\n      };\n    } catch (error) {\n      console.error('Error connecting to voice channel:', error);\n      setError('Failed to connect to voice channel. Please try again later.');\n      setConnectionStatus('disconnected');\n    }\n  };\n  const handleWebSocketMessage = data => {\n    switch (data.type) {\n      case 'participants':\n        setParticipants(data.participants);\n        setIsEchoMode(data.isEchoMode);\n        break;\n      case 'participant_joined':\n        setParticipants(prev => [...prev, data.participant]);\n        setIsEchoMode(data.isEchoMode);\n        break;\n      case 'participant_left':\n        setParticipants(prev => prev.filter(p => p.id !== data.userId));\n        setIsEchoMode(data.isEchoMode);\n        break;\n      default:\n        console.log('Unknown message type:', data.type);\n    }\n  };\n  const reconnect = () => {\n    console.log('Attempting to reconnect...');\n    setTimeout(() => {\n      var _wsRef$current6;\n      if (((_wsRef$current6 = wsRef.current) === null || _wsRef$current6 === void 0 ? void 0 : _wsRef$current6.readyState) !== WebSocket.OPEN) {\n        connect();\n      }\n    }, 3000);\n  };\n  const disconnect = () => {\n    if (wsRef.current) {\n      // Send leave message before closing\n      if (wsRef.current.readyState === WebSocket.OPEN) {\n        try {\n          wsRef.current.send(JSON.stringify({\n            type: 'leave'\n          }));\n        } catch (error) {\n          console.error('Error sending leave message:', error);\n        }\n      }\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    stopAudioStream();\n    stopVideoStream();\n    stopScreenShare();\n    setIsConnected(false);\n  };\n  const startAudioStream = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true,\n          sampleRate: 48000,\n          channelCount: 1\n        }\n      });\n      mediaStreamRef.current = stream;\n\n      // Initialize MediaRecorder with proper audio format\n      const options = {\n        mimeType: 'audio/webm;codecs=opus',\n        audioBitsPerSecond: 128000\n      };\n\n      // Check if the browser supports the specified MIME type\n      if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n        console.warn('Specified MIME type not supported, falling back to default');\n        delete options.mimeType;\n      }\n      mediaRecorderRef.current = new MediaRecorder(stream, options);\n      mediaRecorderRef.current.ondataavailable = event => {\n        var _wsRef$current7;\n        if (event.data.size > 0 && ((_wsRef$current7 = wsRef.current) === null || _wsRef$current7 === void 0 ? void 0 : _wsRef$current7.readyState) === WebSocket.OPEN) {\n          try {\n            wsRef.current.send(event.data);\n          } catch (error) {\n            console.error('Error sending audio data:', error);\n          }\n        }\n      };\n\n      // Start recording with smaller time slices for more frequent updates\n      mediaRecorderRef.current.start(100);\n      console.log('Audio stream started successfully');\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      setError('Failed to access microphone. Please make sure you have granted microphone permissions.');\n    }\n  };\n  const stopAudioStream = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop();\n      mediaRecorderRef.current = null;\n    }\n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => track.stop());\n      mediaStreamRef.current = null;\n    }\n  };\n  const startVideoStream = async () => {\n    try {\n      var _wsRef$current8;\n      // Request both video and audio to ensure we have the right permissions\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          width: {\n            ideal: 1280\n          },\n          height: {\n            ideal: 720\n          },\n          facingMode: 'user'\n        },\n        audio: true\n      });\n      console.log('Video stream started:', stream.getVideoTracks()[0].label);\n      videoStreamRef.current = stream;\n      setIsVideoEnabled(true);\n\n      // Send video stream to other participants\n      if (((_wsRef$current8 = wsRef.current) === null || _wsRef$current8 === void 0 ? void 0 : _wsRef$current8.readyState) === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'video_start',\n          userId: localStorage.getItem('userId')\n        }));\n      }\n\n      // Set the stream to the video element\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n      }\n    } catch (error) {\n      console.error('Error accessing camera:', error);\n      setError('Failed to access camera. Please make sure you have granted camera permissions.');\n      setIsVideoEnabled(false);\n    }\n  };\n  const stopVideoStream = () => {\n    if (videoStreamRef.current) {\n      var _wsRef$current9;\n      videoStreamRef.current.getTracks().forEach(track => track.stop());\n      videoStreamRef.current = null;\n      setIsVideoEnabled(false);\n      if (((_wsRef$current9 = wsRef.current) === null || _wsRef$current9 === void 0 ? void 0 : _wsRef$current9.readyState) === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'video_stop',\n          userId: localStorage.getItem('userId')\n        }));\n      }\n\n      // Clear the video stream\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = null;\n      }\n    }\n  };\n  const startScreenShare = async () => {\n    try {\n      var _wsRef$current0;\n      const stream = await navigator.mediaDevices.getDisplayMedia({\n        video: true\n      });\n      screenStreamRef.current = stream;\n      setIsScreenSharing(true);\n      if (((_wsRef$current0 = wsRef.current) === null || _wsRef$current0 === void 0 ? void 0 : _wsRef$current0.readyState) === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'screen_share_start',\n          userId: localStorage.getItem('userId')\n        }));\n      }\n    } catch (error) {\n      console.error('Error sharing screen:', error);\n    }\n  };\n  const stopScreenShare = () => {\n    if (screenStreamRef.current) {\n      var _wsRef$current1;\n      screenStreamRef.current.getTracks().forEach(track => track.stop());\n      screenStreamRef.current = null;\n      setIsScreenSharing(false);\n      if (((_wsRef$current1 = wsRef.current) === null || _wsRef$current1 === void 0 ? void 0 : _wsRef$current1.readyState) === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'screen_share_stop',\n          userId: localStorage.getItem('userId')\n        }));\n      }\n    }\n  };\n  const playAudio = async audioData => {\n    let audioElement = null;\n    let source = null;\n    let gainNode = null;\n    let objectUrl = null;\n    try {\n      // Create or resume audio context\n      if (!audioContextRef.current) {\n        audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      }\n      if (audioContextRef.current.state === 'suspended') {\n        await audioContextRef.current.resume();\n      }\n\n      // Create a Blob from the received data\n      const blob = new Blob([audioData], {\n        type: 'audio/webm;codecs=opus'\n      });\n      objectUrl = URL.createObjectURL(blob);\n\n      // Create and configure audio element\n      audioElement = new Audio();\n\n      // Set up event handlers before setting the source\n      audioElement.onloadeddata = () => {\n        console.log('Audio data loaded successfully');\n      };\n      audioElement.onerror = error => {\n        console.error('Audio element error:', error);\n        cleanup();\n      };\n\n      // Create audio processing nodes before setting the source\n      source = audioContextRef.current.createMediaElementSource(audioElement);\n      gainNode = audioContextRef.current.createGain();\n      gainNode.gain.value = volume / 100;\n\n      // Connect the audio nodes\n      source.connect(gainNode);\n      gainNode.connect(audioContextRef.current.destination);\n\n      // Set the source after creating the media element source\n      audioElement.src = objectUrl;\n\n      // Wait for the audio to be loaded\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          reject(new Error('Audio loading timeout'));\n        }, 5000);\n        audioElement.onloadeddata = () => {\n          clearTimeout(timeout);\n          resolve();\n        };\n        audioElement.onerror = error => {\n          clearTimeout(timeout);\n          reject(error);\n        };\n        audioElement.load();\n      });\n\n      // Play the audio\n      try {\n        await audioElement.play();\n        console.log('Audio playback started successfully');\n      } catch (playError) {\n        console.error('Error playing audio:', playError);\n\n        // Try to resume the audio context if it's suspended\n        if (audioContextRef.current.state === 'suspended') {\n          await audioContextRef.current.resume();\n          await audioElement.play();\n        } else {\n          throw playError;\n        }\n      }\n\n      // Clean up resources when audio ends\n      audioElement.onended = () => {\n        cleanup();\n      };\n    } catch (error) {\n      console.error('Error in playAudio:', error);\n      cleanup();\n\n      // If there's an error, try to create a new audio context\n      if (audioContextRef.current) {\n        try {\n          await audioContextRef.current.close();\n        } catch (closeError) {\n          console.error('Error closing audio context:', closeError);\n        }\n      }\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n    }\n\n    // Helper function to clean up resources\n    function cleanup() {\n      if (objectUrl) {\n        URL.revokeObjectURL(objectUrl);\n      }\n      if (source) {\n        try {\n          source.disconnect();\n        } catch (e) {\n          console.error('Error disconnecting source:', e);\n        }\n      }\n      if (gainNode) {\n        try {\n          gainNode.disconnect();\n        } catch (e) {\n          console.error('Error disconnecting gain node:', e);\n        }\n      }\n      if (audioElement) {\n        try {\n          audioElement.pause();\n          audioElement.src = '';\n          audioElement.onended = null;\n          audioElement.onerror = null;\n          audioElement.onloadeddata = null;\n        } catch (e) {\n          console.error('Error cleaning up audio element:', e);\n        }\n      }\n    }\n  };\n  const sendWebSocketMessage = message => {\n    var _wsRef$current10;\n    if (((_wsRef$current10 = wsRef.current) === null || _wsRef$current10 === void 0 ? void 0 : _wsRef$current10.readyState) === WebSocket.OPEN) {\n      try {\n        wsRef.current.send(typeof message === 'string' ? message : JSON.stringify(message));\n      } catch (error) {\n        console.error('Error sending WebSocket message:', error);\n      }\n    } else {\n      var _wsRef$current11;\n      console.warn('WebSocket is not in OPEN state. Current state:', (_wsRef$current11 = wsRef.current) === null || _wsRef$current11 === void 0 ? void 0 : _wsRef$current11.readyState);\n    }\n  };\n  const toggleMute = () => {\n    if (mediaStreamRef.current) {\n      const audioTrack = mediaStreamRef.current.getAudioTracks()[0];\n      audioTrack.enabled = !audioTrack.enabled;\n      setIsMuted(!isMuted);\n      sendWebSocketMessage({\n        type: 'mute_state',\n        isMuted: !audioTrack.enabled\n      });\n    }\n  };\n  const toggleDeafen = () => {\n    setIsDeafened(!isDeafened);\n    if (audioContextRef.current) {\n      audioContextRef.current.destination.volume = isDeafened ? volume / 100 : 0;\n    }\n    sendWebSocketMessage({\n      type: 'deafen_state',\n      isDeafened: !isDeafened\n    });\n  };\n  const toggleVideo = () => {\n    if (isVideoEnabled) {\n      stopVideoStream();\n    } else {\n      startVideoStream();\n    }\n    sendWebSocketMessage({\n      type: 'video_state',\n      isEnabled: !isVideoEnabled\n    });\n  };\n  const toggleScreenShare = () => {\n    if (isScreenSharing) {\n      stopScreenShare();\n    } else {\n      startScreenShare();\n    }\n    sendWebSocketMessage({\n      type: 'screen_share_state',\n      isEnabled: !isScreenSharing\n    });\n  };\n  const handleVolumeChange = (event, newValue) => {\n    setVolume(newValue);\n    if (audioContextRef.current && !isDeafened) {\n      audioContextRef.current.destination.volume = newValue / 100;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100%',\n      bgcolor: 'background.paper'\n    },\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 17\n    }, this), connectionStatus === 'connecting' && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"info\",\n      sx: {\n        mb: 2\n      },\n      children: \"Connecting to voice channel...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 17\n    }, this), isEchoMode && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"info\",\n      sx: {\n        mb: 2\n      },\n      children: \"Echo Mode Active - You are the only participant in this voice channel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 631,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      ref: videoContainerRef,\n      sx: {\n        p: 2,\n        display: 'flex',\n        justifyContent: 'center',\n        bgcolor: 'background.default'\n      },\n      children: isVideoEnabled ? /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: localVideoRef,\n        autoPlay: true,\n        muted: true,\n        playsInline: true,\n        style: {\n          width: '100%',\n          maxHeight: '200px',\n          objectFit: 'cover',\n          borderRadius: '8px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        children: \"Camera is disabled\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      sx: {\n        flex: 1,\n        overflow: 'auto'\n      },\n      children: participants.map(participant => /*#__PURE__*/_jsxDEV(ListItem, {\n        children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n          children: /*#__PURE__*/_jsxDEV(Badge, {\n            overlap: \"circular\",\n            anchorOrigin: {\n              vertical: 'bottom',\n              horizontal: 'right'\n            },\n            badgeContent: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                width: 12,\n                height: 12,\n                borderRadius: '50%',\n                bgcolor: participant.isMuted ? 'error.main' : 'success.main',\n                border: '2px solid',\n                borderColor: 'background.paper'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 675,\n              columnNumber: 37\n            }, this),\n            children: /*#__PURE__*/_jsxDEV(Avatar, {\n              children: participant.username[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 685,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: participant.username,\n          secondary: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              alignItems: 'center',\n              gap: 1\n            },\n            children: [participant.isMuted && /*#__PURE__*/_jsxDEV(MicOffIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 692,\n              columnNumber: 61\n            }, this), participant.isDeafened && /*#__PURE__*/_jsxDEV(HeadsetOffIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 693,\n              columnNumber: 64\n            }, this), participant.isVideoEnabled && /*#__PURE__*/_jsxDEV(VideoIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 694,\n              columnNumber: 68\n            }, this), participant.isScreenSharing && /*#__PURE__*/_jsxDEV(ScreenShareIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 695,\n              columnNumber: 69\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 25\n        }, this)]\n      }, participant.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 2,\n        borderTop: 1,\n        borderColor: 'divider',\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          gap: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n          title: isMuted ? \"Unmute\" : \"Mute\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: toggleMute,\n            color: isMuted ? \"error\" : \"default\",\n            children: isMuted ? /*#__PURE__*/_jsxDEV(MicOffIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 715,\n              columnNumber: 40\n            }, this) : /*#__PURE__*/_jsxDEV(MicIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 715,\n              columnNumber: 57\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 714,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: isDeafened ? \"Undeafen\" : \"Deafen\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: toggleDeafen,\n            color: isDeafened ? \"error\" : \"default\",\n            children: isDeafened ? /*#__PURE__*/_jsxDEV(HeadsetOffIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 720,\n              columnNumber: 43\n            }, this) : /*#__PURE__*/_jsxDEV(HeadsetIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 720,\n              columnNumber: 64\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 719,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 712,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          gap: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n          title: isVideoEnabled ? \"Disable Video\" : \"Enable Video\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: toggleVideo,\n            color: isVideoEnabled ? \"primary\" : \"default\",\n            children: isVideoEnabled ? /*#__PURE__*/_jsxDEV(VideoIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 728,\n              columnNumber: 47\n            }, this) : /*#__PURE__*/_jsxDEV(VideoOffIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 728,\n              columnNumber: 63\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 727,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: isScreenSharing ? \"Stop Sharing\" : \"Share Screen\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: toggleScreenShare,\n            color: isScreenSharing ? \"primary\" : \"default\",\n            children: /*#__PURE__*/_jsxDEV(ScreenShareIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 733,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 732,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 725,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: 1,\n          minWidth: 200\n        },\n        children: [/*#__PURE__*/_jsxDEV(VolumeUpIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 739,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Slider, {\n          value: volume,\n          onChange: handleVolumeChange,\n          \"aria-labelledby\": \"volume-slider\",\n          min: 0,\n          max: 100\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 740,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 738,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 704,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 611,\n    columnNumber: 9\n  }, this);\n};\n_s(VoiceChannel, \"ztexQ0uazyEaYJvPRax6ksH+Axc=\", false, function () {\n  return [useAuth];\n});\n_c = VoiceChannel;\nexport default VoiceChannel;\nvar _c;\n$RefreshReg$(_c, \"VoiceChannel\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Box","Button","Typography","IconButton","Paper","Avatar","List","ListItem","ListItemAvatar","ListItemText","Slider","Tooltip","Badge","Divider","Alert","Mic","MicIcon","MicOff","MicOffIcon","VolumeUp","VolumeUpIcon","VolumeOff","VolumeOffIcon","Headset","HeadsetIcon","HeadsetOff","HeadsetOffIcon","Settings","SettingsIcon","ScreenShare","ScreenShareIcon","Videocam","VideoIcon","VideocamOff","VideoOffIcon","MoreVert","MoreVertIcon","useAuth","config","jsxDEV","_jsxDEV","VoiceChannel","channelId","_s","token","isConnected","setIsConnected","isMuted","setIsMuted","isDeafened","setIsDeafened","isVideoEnabled","setIsVideoEnabled","isScreenSharing","setIsScreenSharing","participants","setParticipants","volume","setVolume","showSettings","setShowSettings","connectionStatus","setConnectionStatus","error","setError","isEchoMode","setIsEchoMode","wsRef","mediaStreamRef","audioContextRef","mediaRecorderRef","videoStreamRef","screenStreamRef","videoContainerRef","localVideoRef","connect","disconnect","wsProtocol","window","location","protocol","wsUrl","SERVER_IP","SERVER_PORT","encodeURIComponent","console","log","current","close","WebSocket","connectionTimeout","setTimeout","_wsRef$current","readyState","OPEN","_wsRef$current2","pingInterval","setInterval","_wsRef$current3","send","JSON","stringify","type","healthCheckInterval","_wsRef$current4","reconnect","onopen","clearTimeout","_wsRef$current5","startAudioStream","onclose","event","code","reason","clearInterval","stopAudioStream","stopVideoStream","stopScreenShare","onerror","onmessage","data","Blob","playAudio","catch","parse","handleWebSocketMessage","prev","participant","filter","p","id","userId","_wsRef$current6","stream","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","autoGainControl","sampleRate","channelCount","options","mimeType","audioBitsPerSecond","MediaRecorder","isTypeSupported","warn","ondataavailable","_wsRef$current7","size","start","stop","getTracks","forEach","track","startVideoStream","_wsRef$current8","video","width","ideal","height","facingMode","getVideoTracks","label","localStorage","getItem","srcObject","_wsRef$current9","startScreenShare","_wsRef$current0","getDisplayMedia","_wsRef$current1","audioData","audioElement","source","gainNode","objectUrl","AudioContext","webkitAudioContext","state","resume","blob","URL","createObjectURL","Audio","onloadeddata","cleanup","createMediaElementSource","createGain","gain","value","destination","src","Promise","resolve","reject","timeout","Error","load","play","playError","onended","closeError","revokeObjectURL","e","pause","sendWebSocketMessage","message","_wsRef$current10","_wsRef$current11","toggleMute","audioTrack","getAudioTracks","enabled","toggleDeafen","toggleVideo","isEnabled","toggleScreenShare","handleVolumeChange","newValue","sx","display","flexDirection","bgcolor","children","severity","mb","fileName","_jsxFileName","lineNumber","columnNumber","ref","justifyContent","autoPlay","muted","playsInline","style","maxHeight","objectFit","borderRadius","variant","color","flex","overflow","map","overlap","anchorOrigin","vertical","horizontal","badgeContent","border","borderColor","username","primary","secondary","alignItems","gap","fontSize","borderTop","title","onClick","minWidth","onChange","min","max","_c","$RefreshReg$"],"sources":["C:/Users/skyki/PycharmProjects/musiceblya228/src/components/VoiceChannel.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Typography,\r\n    IconButton,\r\n    Paper,\r\n    Avatar,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    Slider,\r\n    Tooltip,\r\n    Badge,\r\n    Divider,\r\n    Alert\r\n} from '@mui/material';\r\nimport {\r\n    Mic as MicIcon,\r\n    MicOff as MicOffIcon,\r\n    VolumeUp as VolumeUpIcon,\r\n    VolumeOff as VolumeOffIcon,\r\n    Headset as HeadsetIcon,\r\n    HeadsetOff as HeadsetOffIcon,\r\n    Settings as SettingsIcon,\r\n    ScreenShare as ScreenShareIcon,\r\n    Videocam as VideoIcon,\r\n    VideocamOff as VideoOffIcon,\r\n    MoreVert as MoreVertIcon\r\n} from '@mui/icons-material';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport config from '../config';\r\n\r\nconst VoiceChannel = ({ channelId }) => {\r\n    const { token } = useAuth();\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const [isMuted, setIsMuted] = useState(false);\r\n    const [isDeafened, setIsDeafened] = useState(false);\r\n    const [isVideoEnabled, setIsVideoEnabled] = useState(false);\r\n    const [isScreenSharing, setIsScreenSharing] = useState(false);\r\n    const [participants, setParticipants] = useState([]);\r\n    const [volume, setVolume] = useState(100);\r\n    const [showSettings, setShowSettings] = useState(false);\r\n    const [connectionStatus, setConnectionStatus] = useState('disconnected'); // 'disconnected', 'connecting', 'connected'\r\n    const [error, setError] = useState('');\r\n    const [isEchoMode, setIsEchoMode] = useState(false);\r\n    \r\n    const wsRef = useRef(null);\r\n    const mediaStreamRef = useRef(null);\r\n    const audioContextRef = useRef(null);\r\n    const mediaRecorderRef = useRef(null);\r\n    const videoStreamRef = useRef(null);\r\n    const screenStreamRef = useRef(null);\r\n    const videoContainerRef = useRef(null);\r\n    const localVideoRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        connect();\r\n        return () => {\r\n            disconnect();\r\n        };\r\n    }, [channelId]); // Reconnect when channel changes\r\n\r\n    const connect = async () => {\r\n        try {\r\n            setConnectionStatus('connecting');\r\n            setError('');\r\n\r\n            // Get the WebSocket protocol based on the current protocol\r\n            const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n            const wsUrl = `${wsProtocol}//${config.SERVER_IP}:${config.SERVER_PORT}/ws/voice/${channelId}?token=${encodeURIComponent(token)}`;\r\n            \r\n            console.log('Connecting to WebSocket:', wsUrl);\r\n            \r\n            // Close existing connection if any\r\n            if (wsRef.current) {\r\n                wsRef.current.close();\r\n            }\r\n            \r\n            wsRef.current = new WebSocket(wsUrl);\r\n\r\n            // Set connection timeout\r\n            const connectionTimeout = setTimeout(() => {\r\n                if (wsRef.current?.readyState !== WebSocket.OPEN) {\r\n                    console.error('WebSocket connection timeout');\r\n                    setError('Connection timeout. Please try again.');\r\n                    wsRef.current?.close();\r\n                }\r\n            }, 5000);\r\n\r\n            // Set up ping interval to keep connection alive\r\n            const pingInterval = setInterval(() => {\r\n                if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n                    try {\r\n                        wsRef.current.send(JSON.stringify({ type: 'ping' }));\r\n                        console.log('Sent ping message');\r\n                    } catch (error) {\r\n                        console.error('Error sending ping:', error);\r\n                    }\r\n                }\r\n            }, 15000);\r\n\r\n            // Set up connection health check\r\n            const healthCheckInterval = setInterval(() => {\r\n                if (wsRef.current?.readyState !== WebSocket.OPEN) {\r\n                    console.log('Connection health check failed, attempting to reconnect...');\r\n                    reconnect();\r\n                }\r\n            }, 30000);\r\n\r\n            wsRef.current.onopen = async () => {\r\n                console.log('WebSocket connected successfully');\r\n                clearTimeout(connectionTimeout);\r\n                setConnectionStatus('connected');\r\n                setIsConnected(true);\r\n                \r\n                // Send join message to server\r\n                try {\r\n                    if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n                        wsRef.current.send(JSON.stringify({\r\n                            type: 'join'\r\n                        }));\r\n                        console.log('Sent join message');\r\n                        \r\n                        // Start audio stream after successful connection\r\n                        await startAudioStream();\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error sending join message:', error);\r\n                    setError('Failed to join voice channel. Please try again.');\r\n                    disconnect();\r\n                }\r\n            };\r\n\r\n            wsRef.current.onclose = (event) => {\r\n                console.log('WebSocket closed:', event.code, event.reason);\r\n                clearTimeout(connectionTimeout);\r\n                clearInterval(pingInterval);\r\n                clearInterval(healthCheckInterval);\r\n                setConnectionStatus('disconnected');\r\n                setIsConnected(false);\r\n                stopAudioStream();\r\n                stopVideoStream();\r\n                stopScreenShare();\r\n                \r\n                // Handle specific error codes\r\n                switch (event.code) {\r\n                    case 4000:\r\n                        setError('Authentication failed. Please log in again.');\r\n                        break;\r\n                    case 4001:\r\n                        setError('Invalid voice channel.');\r\n                        break;\r\n                    case 4002:\r\n                        setError('You are not a member of this server.');\r\n                        break;\r\n                    case 4003:\r\n                        setError('User not found. Please log in again.');\r\n                        break;\r\n                    case 1006:\r\n                        setError('Connection lost. Attempting to reconnect...');\r\n                        reconnect();\r\n                        break;\r\n                    default:\r\n                        setError(`Connection closed: ${event.reason || 'Unknown error'}`);\r\n                        // Try to reconnect if the connection was lost\r\n                        if (event.code !== 1000) {\r\n                            reconnect();\r\n                        }\r\n                }\r\n            };\r\n\r\n            wsRef.current.onerror = (error) => {\r\n                console.error('WebSocket error:', error);\r\n                // Don't clear intervals or disconnect on error\r\n                // Let the onclose handler handle the cleanup\r\n            };\r\n\r\n            wsRef.current.onmessage = async (event) => {\r\n                if (event.data instanceof Blob) {\r\n                    try {\r\n                        // Handle the blob directly without converting to ArrayBuffer\r\n                        playAudio(event.data).catch(error => {\r\n                            console.error('Audio playback failed:', error);\r\n                        });\r\n                    } catch (error) {\r\n                        console.error('Error processing audio data:', error);\r\n                    }\r\n                } else {\r\n                    try {\r\n                        const data = JSON.parse(event.data);\r\n                        console.log('Received WebSocket message:', data);\r\n                        \r\n                        if (data.type === 'ping') {\r\n                            try {\r\n                                wsRef.current.send(JSON.stringify({ type: 'pong' }));\r\n                                console.log('Sent pong response');\r\n                            } catch (error) {\r\n                                console.error('Error sending pong:', error);\r\n                            }\r\n                            return;\r\n                        }\r\n                        \r\n                        handleWebSocketMessage(data);\r\n                    } catch (error) {\r\n                        console.error('Error parsing WebSocket message:', error);\r\n                    }\r\n                }\r\n            };\r\n        } catch (error) {\r\n            console.error('Error connecting to voice channel:', error);\r\n            setError('Failed to connect to voice channel. Please try again later.');\r\n            setConnectionStatus('disconnected');\r\n        }\r\n    };\r\n\r\n    const handleWebSocketMessage = (data) => {\r\n        switch (data.type) {\r\n            case 'participants':\r\n                setParticipants(data.participants);\r\n                setIsEchoMode(data.isEchoMode);\r\n                break;\r\n            case 'participant_joined':\r\n                setParticipants(prev => [...prev, data.participant]);\r\n                setIsEchoMode(data.isEchoMode);\r\n                break;\r\n            case 'participant_left':\r\n                setParticipants(prev => prev.filter(p => p.id !== data.userId));\r\n                setIsEchoMode(data.isEchoMode);\r\n                break;\r\n            default:\r\n                console.log('Unknown message type:', data.type);\r\n        }\r\n    };\r\n\r\n    const reconnect = () => {\r\n        console.log('Attempting to reconnect...');\r\n        setTimeout(() => {\r\n            if (wsRef.current?.readyState !== WebSocket.OPEN) {\r\n                connect();\r\n            }\r\n        }, 3000);\r\n    };\r\n\r\n    const disconnect = () => {\r\n        if (wsRef.current) {\r\n            // Send leave message before closing\r\n            if (wsRef.current.readyState === WebSocket.OPEN) {\r\n                try {\r\n                    wsRef.current.send(JSON.stringify({\r\n                        type: 'leave'\r\n                    }));\r\n                } catch (error) {\r\n                    console.error('Error sending leave message:', error);\r\n                }\r\n            }\r\n            wsRef.current.close();\r\n            wsRef.current = null;\r\n        }\r\n        stopAudioStream();\r\n        stopVideoStream();\r\n        stopScreenShare();\r\n        setIsConnected(false);\r\n    };\r\n\r\n    const startAudioStream = async () => {\r\n        try {\r\n            const stream = await navigator.mediaDevices.getUserMedia({ \r\n                audio: {\r\n                    echoCancellation: true,\r\n                    noiseSuppression: true,\r\n                    autoGainControl: true,\r\n                    sampleRate: 48000,\r\n                    channelCount: 1\r\n                }\r\n            });\r\n            mediaStreamRef.current = stream;\r\n\r\n            // Initialize MediaRecorder with proper audio format\r\n            const options = {\r\n                mimeType: 'audio/webm;codecs=opus',\r\n                audioBitsPerSecond: 128000\r\n            };\r\n\r\n            // Check if the browser supports the specified MIME type\r\n            if (!MediaRecorder.isTypeSupported(options.mimeType)) {\r\n                console.warn('Specified MIME type not supported, falling back to default');\r\n                delete options.mimeType;\r\n            }\r\n\r\n            mediaRecorderRef.current = new MediaRecorder(stream, options);\r\n\r\n            mediaRecorderRef.current.ondataavailable = (event) => {\r\n                if (event.data.size > 0 && wsRef.current?.readyState === WebSocket.OPEN) {\r\n                    try {\r\n                        wsRef.current.send(event.data);\r\n                    } catch (error) {\r\n                        console.error('Error sending audio data:', error);\r\n                    }\r\n                }\r\n            };\r\n\r\n            // Start recording with smaller time slices for more frequent updates\r\n            mediaRecorderRef.current.start(100);\r\n            console.log('Audio stream started successfully');\r\n        } catch (error) {\r\n            console.error('Error accessing microphone:', error);\r\n            setError('Failed to access microphone. Please make sure you have granted microphone permissions.');\r\n        }\r\n    };\r\n\r\n    const stopAudioStream = () => {\r\n        if (mediaRecorderRef.current) {\r\n            mediaRecorderRef.current.stop();\r\n            mediaRecorderRef.current = null;\r\n        }\r\n        if (mediaStreamRef.current) {\r\n            mediaStreamRef.current.getTracks().forEach(track => track.stop());\r\n            mediaStreamRef.current = null;\r\n        }\r\n    };\r\n\r\n    const startVideoStream = async () => {\r\n        try {\r\n            // Request both video and audio to ensure we have the right permissions\r\n            const stream = await navigator.mediaDevices.getUserMedia({ \r\n                video: {\r\n                    width: { ideal: 1280 },\r\n                    height: { ideal: 720 },\r\n                    facingMode: 'user'\r\n                },\r\n                audio: true \r\n            });\r\n            \r\n            console.log('Video stream started:', stream.getVideoTracks()[0].label);\r\n            videoStreamRef.current = stream;\r\n            setIsVideoEnabled(true);\r\n            \r\n            // Send video stream to other participants\r\n            if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n                wsRef.current.send(JSON.stringify({\r\n                    type: 'video_start',\r\n                    userId: localStorage.getItem('userId')\r\n                }));\r\n            }\r\n\r\n            // Set the stream to the video element\r\n            if (localVideoRef.current) {\r\n                localVideoRef.current.srcObject = stream;\r\n            }\r\n        } catch (error) {\r\n            console.error('Error accessing camera:', error);\r\n            setError('Failed to access camera. Please make sure you have granted camera permissions.');\r\n            setIsVideoEnabled(false);\r\n        }\r\n    };\r\n\r\n    const stopVideoStream = () => {\r\n        if (videoStreamRef.current) {\r\n            videoStreamRef.current.getTracks().forEach(track => track.stop());\r\n            videoStreamRef.current = null;\r\n            setIsVideoEnabled(false);\r\n            \r\n            if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n                wsRef.current.send(JSON.stringify({\r\n                    type: 'video_stop',\r\n                    userId: localStorage.getItem('userId')\r\n                }));\r\n            }\r\n\r\n            // Clear the video stream\r\n            if (localVideoRef.current) {\r\n                localVideoRef.current.srcObject = null;\r\n            }\r\n        }\r\n    };\r\n\r\n    const startScreenShare = async () => {\r\n        try {\r\n            const stream = await navigator.mediaDevices.getDisplayMedia({ video: true });\r\n            screenStreamRef.current = stream;\r\n            setIsScreenSharing(true);\r\n            \r\n            if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n                wsRef.current.send(JSON.stringify({\r\n                    type: 'screen_share_start',\r\n                    userId: localStorage.getItem('userId')\r\n                }));\r\n            }\r\n        } catch (error) {\r\n            console.error('Error sharing screen:', error);\r\n        }\r\n    };\r\n\r\n    const stopScreenShare = () => {\r\n        if (screenStreamRef.current) {\r\n            screenStreamRef.current.getTracks().forEach(track => track.stop());\r\n            screenStreamRef.current = null;\r\n            setIsScreenSharing(false);\r\n            \r\n            if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n                wsRef.current.send(JSON.stringify({\r\n                    type: 'screen_share_stop',\r\n                    userId: localStorage.getItem('userId')\r\n                }));\r\n            }\r\n        }\r\n    };\r\n\r\n    const playAudio = async (audioData) => {\r\n        let audioElement = null;\r\n        let source = null;\r\n        let gainNode = null;\r\n        let objectUrl = null;\r\n\r\n        try {\r\n            // Create or resume audio context\r\n            if (!audioContextRef.current) {\r\n                audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\r\n            }\r\n            \r\n            if (audioContextRef.current.state === 'suspended') {\r\n                await audioContextRef.current.resume();\r\n            }\r\n\r\n            // Create a Blob from the received data\r\n            const blob = new Blob([audioData], { type: 'audio/webm;codecs=opus' });\r\n            objectUrl = URL.createObjectURL(blob);\r\n\r\n            // Create and configure audio element\r\n            audioElement = new Audio();\r\n            \r\n            // Set up event handlers before setting the source\r\n            audioElement.onloadeddata = () => {\r\n                console.log('Audio data loaded successfully');\r\n            };\r\n\r\n            audioElement.onerror = (error) => {\r\n                console.error('Audio element error:', error);\r\n                cleanup();\r\n            };\r\n\r\n            // Create audio processing nodes before setting the source\r\n            source = audioContextRef.current.createMediaElementSource(audioElement);\r\n            gainNode = audioContextRef.current.createGain();\r\n            gainNode.gain.value = volume / 100;\r\n\r\n            // Connect the audio nodes\r\n            source.connect(gainNode);\r\n            gainNode.connect(audioContextRef.current.destination);\r\n\r\n            // Set the source after creating the media element source\r\n            audioElement.src = objectUrl;\r\n\r\n            // Wait for the audio to be loaded\r\n            await new Promise((resolve, reject) => {\r\n                const timeout = setTimeout(() => {\r\n                    reject(new Error('Audio loading timeout'));\r\n                }, 5000);\r\n\r\n                audioElement.onloadeddata = () => {\r\n                    clearTimeout(timeout);\r\n                    resolve();\r\n                };\r\n\r\n                audioElement.onerror = (error) => {\r\n                    clearTimeout(timeout);\r\n                    reject(error);\r\n                };\r\n\r\n                audioElement.load();\r\n            });\r\n\r\n            // Play the audio\r\n            try {\r\n                await audioElement.play();\r\n                console.log('Audio playback started successfully');\r\n            } catch (playError) {\r\n                console.error('Error playing audio:', playError);\r\n                \r\n                // Try to resume the audio context if it's suspended\r\n                if (audioContextRef.current.state === 'suspended') {\r\n                    await audioContextRef.current.resume();\r\n                    await audioElement.play();\r\n                } else {\r\n                    throw playError;\r\n                }\r\n            }\r\n\r\n            // Clean up resources when audio ends\r\n            audioElement.onended = () => {\r\n                cleanup();\r\n            };\r\n\r\n        } catch (error) {\r\n            console.error('Error in playAudio:', error);\r\n            cleanup();\r\n            \r\n            // If there's an error, try to create a new audio context\r\n            if (audioContextRef.current) {\r\n                try {\r\n                    await audioContextRef.current.close();\r\n                } catch (closeError) {\r\n                    console.error('Error closing audio context:', closeError);\r\n                }\r\n            }\r\n            audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\r\n        }\r\n\r\n        // Helper function to clean up resources\r\n        function cleanup() {\r\n            if (objectUrl) {\r\n                URL.revokeObjectURL(objectUrl);\r\n            }\r\n            if (source) {\r\n                try {\r\n                    source.disconnect();\r\n                } catch (e) {\r\n                    console.error('Error disconnecting source:', e);\r\n                }\r\n            }\r\n            if (gainNode) {\r\n                try {\r\n                    gainNode.disconnect();\r\n                } catch (e) {\r\n                    console.error('Error disconnecting gain node:', e);\r\n                }\r\n            }\r\n            if (audioElement) {\r\n                try {\r\n                    audioElement.pause();\r\n                    audioElement.src = '';\r\n                    audioElement.onended = null;\r\n                    audioElement.onerror = null;\r\n                    audioElement.onloadeddata = null;\r\n                } catch (e) {\r\n                    console.error('Error cleaning up audio element:', e);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const sendWebSocketMessage = (message) => {\r\n        if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n            try {\r\n                wsRef.current.send(typeof message === 'string' ? message : JSON.stringify(message));\r\n            } catch (error) {\r\n                console.error('Error sending WebSocket message:', error);\r\n            }\r\n        } else {\r\n            console.warn('WebSocket is not in OPEN state. Current state:', wsRef.current?.readyState);\r\n        }\r\n    };\r\n\r\n    const toggleMute = () => {\r\n        if (mediaStreamRef.current) {\r\n            const audioTrack = mediaStreamRef.current.getAudioTracks()[0];\r\n            audioTrack.enabled = !audioTrack.enabled;\r\n            setIsMuted(!isMuted);\r\n            sendWebSocketMessage({\r\n                type: 'mute_state',\r\n                isMuted: !audioTrack.enabled\r\n            });\r\n        }\r\n    };\r\n\r\n    const toggleDeafen = () => {\r\n        setIsDeafened(!isDeafened);\r\n        if (audioContextRef.current) {\r\n            audioContextRef.current.destination.volume = isDeafened ? volume / 100 : 0;\r\n        }\r\n        sendWebSocketMessage({\r\n            type: 'deafen_state',\r\n            isDeafened: !isDeafened\r\n        });\r\n    };\r\n\r\n    const toggleVideo = () => {\r\n        if (isVideoEnabled) {\r\n            stopVideoStream();\r\n        } else {\r\n            startVideoStream();\r\n        }\r\n        sendWebSocketMessage({\r\n            type: 'video_state',\r\n            isEnabled: !isVideoEnabled\r\n        });\r\n    };\r\n\r\n    const toggleScreenShare = () => {\r\n        if (isScreenSharing) {\r\n            stopScreenShare();\r\n        } else {\r\n            startScreenShare();\r\n        }\r\n        sendWebSocketMessage({\r\n            type: 'screen_share_state',\r\n            isEnabled: !isScreenSharing\r\n        });\r\n    };\r\n\r\n    const handleVolumeChange = (event, newValue) => {\r\n        setVolume(newValue);\r\n        if (audioContextRef.current && !isDeafened) {\r\n            audioContextRef.current.destination.volume = newValue / 100;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ \r\n            display: 'flex', \r\n            flexDirection: 'column',\r\n            height: '100%',\r\n            bgcolor: 'background.paper'\r\n        }}>\r\n            {/* Connection Status */}\r\n            {error && (\r\n                <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                    {error}\r\n                </Alert>\r\n            )}\r\n            \r\n            {connectionStatus === 'connecting' && (\r\n                <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                    Connecting to voice channel...\r\n                </Alert>\r\n            )}\r\n\r\n            {isEchoMode && (\r\n                <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                    Echo Mode Active - You are the only participant in this voice channel\r\n                </Alert>\r\n            )}\r\n\r\n            {/* Video Container */}\r\n            <Box \r\n                ref={videoContainerRef}\r\n                sx={{ \r\n                    p: 2, \r\n                    display: 'flex', \r\n                    justifyContent: 'center',\r\n                    bgcolor: 'background.default'\r\n                }}\r\n            >\r\n                {isVideoEnabled ? (\r\n                    <video\r\n                        ref={localVideoRef}\r\n                        autoPlay\r\n                        muted\r\n                        playsInline\r\n                        style={{\r\n                            width: '100%',\r\n                            maxHeight: '200px',\r\n                            objectFit: 'cover',\r\n                            borderRadius: '8px'\r\n                        }}\r\n                    />\r\n                ) : (\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Camera is disabled\r\n                    </Typography>\r\n                )}\r\n            </Box>\r\n\r\n            {/* Participants List */}\r\n            <List sx={{ flex: 1, overflow: 'auto' }}>\r\n                {participants.map((participant) => (\r\n                    <ListItem key={participant.id}>\r\n                        <ListItemAvatar>\r\n                            <Badge\r\n                                overlap=\"circular\"\r\n                                anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n                                badgeContent={\r\n                                    <Box sx={{ \r\n                                        width: 12, \r\n                                        height: 12, \r\n                                        borderRadius: '50%',\r\n                                        bgcolor: participant.isMuted ? 'error.main' : 'success.main',\r\n                                        border: '2px solid',\r\n                                        borderColor: 'background.paper'\r\n                                    }} />\r\n                                }\r\n                            >\r\n                                <Avatar>{participant.username[0]}</Avatar>\r\n                            </Badge>\r\n                        </ListItemAvatar>\r\n                        <ListItemText \r\n                            primary={participant.username}\r\n                            secondary={\r\n                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                                    {participant.isMuted && <MicOffIcon fontSize=\"small\" />}\r\n                                    {participant.isDeafened && <HeadsetOffIcon fontSize=\"small\" />}\r\n                                    {participant.isVideoEnabled && <VideoIcon fontSize=\"small\" />}\r\n                                    {participant.isScreenSharing && <ScreenShareIcon fontSize=\"small\" />}\r\n                                </Box>\r\n                            }\r\n                        />\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n\r\n            {/* Controls */}\r\n            <Box sx={{ \r\n                p: 2, \r\n                borderTop: 1, \r\n                borderColor: 'divider',\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center'\r\n            }}>\r\n                <Box sx={{ display: 'flex', gap: 1 }}>\r\n                    <Tooltip title={isMuted ? \"Unmute\" : \"Mute\"}>\r\n                        <IconButton onClick={toggleMute} color={isMuted ? \"error\" : \"default\"}>\r\n                            {isMuted ? <MicOffIcon /> : <MicIcon />}\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title={isDeafened ? \"Undeafen\" : \"Deafen\"}>\r\n                        <IconButton onClick={toggleDeafen} color={isDeafened ? \"error\" : \"default\"}>\r\n                            {isDeafened ? <HeadsetOffIcon /> : <HeadsetIcon />}\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </Box>\r\n\r\n                <Box sx={{ display: 'flex', gap: 1 }}>\r\n                    <Tooltip title={isVideoEnabled ? \"Disable Video\" : \"Enable Video\"}>\r\n                        <IconButton onClick={toggleVideo} color={isVideoEnabled ? \"primary\" : \"default\"}>\r\n                            {isVideoEnabled ? <VideoIcon /> : <VideoOffIcon />}\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title={isScreenSharing ? \"Stop Sharing\" : \"Share Screen\"}>\r\n                        <IconButton onClick={toggleScreenShare} color={isScreenSharing ? \"primary\" : \"default\"}>\r\n                            <ScreenShareIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </Box>\r\n\r\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, minWidth: 200 }}>\r\n                    <VolumeUpIcon />\r\n                    <Slider\r\n                        value={volume}\r\n                        onChange={handleVolumeChange}\r\n                        aria-labelledby=\"volume-slider\"\r\n                        min={0}\r\n                        max={100}\r\n                    />\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default VoiceChannel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}