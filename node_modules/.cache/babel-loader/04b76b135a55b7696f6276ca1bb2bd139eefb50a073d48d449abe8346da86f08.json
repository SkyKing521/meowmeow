{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\skyki\\\\PycharmProjects\\\\musiceblya228\\\\src\\\\components\\\\VoiceChannel.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Box, Button, Typography, IconButton, Paper, Avatar, List, ListItem, ListItemAvatar, ListItemText, Slider, Tooltip, Badge, Divider, Alert } from '@mui/material';\nimport { Mic as MicIcon, MicOff as MicOffIcon, VolumeUp as VolumeUpIcon, VolumeOff as VolumeOffIcon, Headset as HeadsetIcon, HeadsetOff as HeadsetOffIcon, Settings as SettingsIcon, ScreenShare as ScreenShareIcon, Videocam as VideoIcon, VideocamOff as VideoOffIcon, MoreVert as MoreVertIcon } from '@mui/icons-material';\nimport { useAuth } from '../contexts/AuthContext';\nimport config from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VoiceChannel = ({\n  channelId\n}) => {\n  _s();\n  const {\n    token\n  } = useAuth();\n  const [isConnected, setIsConnected] = useState(false);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isDeafened, setIsDeafened] = useState(false);\n  const [isVideoEnabled, setIsVideoEnabled] = useState(false);\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [participants, setParticipants] = useState([]);\n  const [volume, setVolume] = useState(100);\n  const [showSettings, setShowSettings] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected'); // 'disconnected', 'connecting', 'connected'\n  const [error, setError] = useState('');\n  const [isEchoMode, setIsEchoMode] = useState(false);\n\n  // Add new state variables for audio handling\n  const [audioStream, setAudioStream] = useState(null);\n  const [audioContext, setAudioContext] = useState(null);\n  const [audioProcessor, setAudioProcessor] = useState(null);\n  const wsRef = useRef(null);\n  const mediaStreamRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const videoStreamRef = useRef(null);\n  const screenStreamRef = useRef(null);\n  const videoContainerRef = useRef(null);\n  const localVideoRef = useRef(null);\n  useEffect(() => {\n    connect();\n    return () => {\n      disconnect();\n    };\n  }, [channelId]); // Reconnect when channel changes\n\n  const connect = async () => {\n    try {\n      setConnectionStatus('connecting');\n      setError('');\n\n      // Get the WebSocket protocol based on the current protocol\n      const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsUrl = `${wsProtocol}//${config.SERVER_IP}:${config.SERVER_PORT}/ws/voice/${channelId}?token=${encodeURIComponent(token)}`;\n      console.log('Connecting to WebSocket:', wsUrl);\n\n      // Close existing connection if any\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n      wsRef.current = new WebSocket(wsUrl);\n\n      // Set connection timeout\n      const connectionTimeout = setTimeout(() => {\n        var _wsRef$current;\n        if (((_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.readyState) !== WebSocket.OPEN) {\n          var _wsRef$current2;\n          console.error('WebSocket connection timeout');\n          setError('Connection timeout. Please try again.');\n          (_wsRef$current2 = wsRef.current) === null || _wsRef$current2 === void 0 ? void 0 : _wsRef$current2.close();\n        }\n      }, 5000);\n\n      // Set up ping interval to keep connection alive\n      const pingInterval = setInterval(() => {\n        var _wsRef$current3;\n        if (((_wsRef$current3 = wsRef.current) === null || _wsRef$current3 === void 0 ? void 0 : _wsRef$current3.readyState) === WebSocket.OPEN) {\n          try {\n            wsRef.current.send(JSON.stringify({\n              type: 'ping'\n            }));\n            console.log('Sent ping message');\n          } catch (error) {\n            console.error('Error sending ping:', error);\n          }\n        }\n      }, 15000);\n\n      // Set up connection health check\n      const healthCheckInterval = setInterval(() => {\n        var _wsRef$current4;\n        if (((_wsRef$current4 = wsRef.current) === null || _wsRef$current4 === void 0 ? void 0 : _wsRef$current4.readyState) !== WebSocket.OPEN) {\n          console.log('Connection health check failed, attempting to reconnect...');\n          reconnect();\n        }\n      }, 30000);\n      wsRef.current.onopen = async () => {\n        console.log('WebSocket connected successfully');\n        clearTimeout(connectionTimeout);\n        setConnectionStatus('connected');\n        setIsConnected(true);\n\n        // Send join message to server\n        try {\n          var _wsRef$current5;\n          if (((_wsRef$current5 = wsRef.current) === null || _wsRef$current5 === void 0 ? void 0 : _wsRef$current5.readyState) === WebSocket.OPEN) {\n            wsRef.current.send(JSON.stringify({\n              type: 'join'\n            }));\n            console.log('Sent join message');\n\n            // Start audio stream after successful connection\n            await startAudioStream();\n          }\n        } catch (error) {\n          console.error('Error sending join message:', error);\n          setError('Failed to join voice channel. Please try again.');\n          disconnect();\n        }\n      };\n      wsRef.current.onclose = event => {\n        console.log('WebSocket closed:', event.code, event.reason);\n        clearTimeout(connectionTimeout);\n        clearInterval(pingInterval);\n        clearInterval(healthCheckInterval);\n        setConnectionStatus('disconnected');\n        setIsConnected(false);\n        stopAudioStream();\n        stopVideoStream();\n        stopScreenShare();\n\n        // Handle specific error codes\n        switch (event.code) {\n          case 4000:\n            setError('Authentication failed. Please log in again.');\n            break;\n          case 4001:\n            setError('Invalid voice channel.');\n            break;\n          case 4002:\n            setError('You are not a member of this server.');\n            break;\n          case 4003:\n            setError('User not found. Please log in again.');\n            break;\n          case 1006:\n            setError('Connection lost. Attempting to reconnect...');\n            reconnect();\n            break;\n          default:\n            setError(`Connection closed: ${event.reason || 'Unknown error'}`);\n            // Try to reconnect if the connection was lost\n            if (event.code !== 1000) {\n              reconnect();\n            }\n        }\n      };\n      wsRef.current.onerror = error => {\n        console.error('WebSocket error:', error);\n        // Don't clear intervals or disconnect on error\n        // Let the onclose handler handle the cleanup\n      };\n      wsRef.current.onmessage = async event => {\n        if (event.data instanceof Blob) {\n          try {\n            console.log('Received audio data blob, size:', event.data.size);\n            await playAudio(event.data);\n          } catch (error) {\n            console.error('Error processing audio data:', error);\n          }\n        } else {\n          try {\n            const data = JSON.parse(event.data);\n            console.log('Received WebSocket message:', data);\n            if (data.type === 'ping') {\n              try {\n                wsRef.current.send(JSON.stringify({\n                  type: 'pong'\n                }));\n                console.log('Sent pong response');\n              } catch (error) {\n                console.error('Error sending pong:', error);\n              }\n              return;\n            }\n            handleWebSocketMessage(data);\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        }\n      };\n    } catch (error) {\n      console.error('Error connecting to voice channel:', error);\n      setError('Failed to connect to voice channel. Please try again later.');\n      setConnectionStatus('disconnected');\n    }\n  };\n  const handleWebSocketMessage = data => {\n    switch (data.type) {\n      case 'participants':\n        setParticipants(data.participants);\n        setIsEchoMode(data.isEchoMode);\n        break;\n      case 'participant_joined':\n        setParticipants(prev => [...prev, data.participant]);\n        setIsEchoMode(data.isEchoMode);\n        break;\n      case 'participant_left':\n        setParticipants(prev => prev.filter(p => p.id !== data.userId));\n        setIsEchoMode(data.isEchoMode);\n        break;\n      default:\n        console.log('Unknown message type:', data.type);\n    }\n  };\n  const reconnect = () => {\n    console.log('Attempting to reconnect...');\n    setTimeout(() => {\n      var _wsRef$current6;\n      if (((_wsRef$current6 = wsRef.current) === null || _wsRef$current6 === void 0 ? void 0 : _wsRef$current6.readyState) !== WebSocket.OPEN) {\n        connect();\n      }\n    }, 3000);\n  };\n  const disconnect = () => {\n    if (wsRef.current) {\n      // Send leave message before closing\n      if (wsRef.current.readyState === WebSocket.OPEN) {\n        try {\n          wsRef.current.send(JSON.stringify({\n            type: 'leave'\n          }));\n        } catch (error) {\n          console.error('Error sending leave message:', error);\n        }\n      }\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    stopAudioStream();\n    stopVideoStream();\n    stopScreenShare();\n    setIsConnected(false);\n  };\n  const startAudioStream = async () => {\n    try {\n      console.log('Starting audio stream...');\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true,\n          sampleRate: 48000,\n          channelCount: 1\n        }\n      });\n      console.log('Got media stream:', stream.getAudioTracks()[0].label);\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const source = audioContext.createMediaStreamSource(stream);\n      const processor = audioContext.createScriptProcessor(1024, 1, 1);\n      source.connect(processor);\n      processor.connect(audioContext.destination);\n      processor.onaudioprocess = e => {\n        var _wsRef$current7;\n        if (!isMuted && ((_wsRef$current7 = wsRef.current) === null || _wsRef$current7 === void 0 ? void 0 : _wsRef$current7.readyState) === WebSocket.OPEN) {\n          const inputData = e.inputBuffer.getChannelData(0);\n          // Convert Float32Array to Int16Array for better compatibility\n          const pcmData = new Int16Array(inputData.length);\n          for (let i = 0; i < inputData.length; i++) {\n            pcmData[i] = Math.max(-32768, Math.min(32767, Math.round(inputData[i] * 32767)));\n          }\n\n          // Convert to base64\n          const base64Data = btoa(String.fromCharCode.apply(null, new Uint8Array(pcmData.buffer)));\n          wsRef.current.send(JSON.stringify({\n            type: 'audio',\n            data: base64Data\n          }));\n        }\n      };\n      setAudioStream(stream);\n      setAudioContext(audioContext);\n      setAudioProcessor(processor);\n    } catch (error) {\n      console.error('Error starting audio stream:', error);\n      setError('Failed to access microphone. Please make sure you have granted microphone permissions.');\n    }\n  };\n  const stopAudioStream = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop();\n      mediaRecorderRef.current = null;\n    }\n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => track.stop());\n      mediaStreamRef.current = null;\n    }\n  };\n  const startVideoStream = async () => {\n    try {\n      var _wsRef$current8;\n      // Request both video and audio to ensure we have the right permissions\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          width: {\n            ideal: 1280\n          },\n          height: {\n            ideal: 720\n          },\n          facingMode: 'user'\n        },\n        audio: true\n      });\n      console.log('Video stream started:', stream.getVideoTracks()[0].label);\n      videoStreamRef.current = stream;\n      setIsVideoEnabled(true);\n\n      // Send video stream to other participants\n      if (((_wsRef$current8 = wsRef.current) === null || _wsRef$current8 === void 0 ? void 0 : _wsRef$current8.readyState) === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'video_start',\n          userId: localStorage.getItem('userId')\n        }));\n      }\n\n      // Set the stream to the video element\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n      }\n    } catch (error) {\n      console.error('Error accessing camera:', error);\n      setError('Failed to access camera. Please make sure you have granted camera permissions.');\n      setIsVideoEnabled(false);\n    }\n  };\n  const stopVideoStream = () => {\n    if (videoStreamRef.current) {\n      var _wsRef$current9;\n      videoStreamRef.current.getTracks().forEach(track => track.stop());\n      videoStreamRef.current = null;\n      setIsVideoEnabled(false);\n      if (((_wsRef$current9 = wsRef.current) === null || _wsRef$current9 === void 0 ? void 0 : _wsRef$current9.readyState) === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'video_stop',\n          userId: localStorage.getItem('userId')\n        }));\n      }\n\n      // Clear the video stream\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = null;\n      }\n    }\n  };\n  const startScreenShare = async () => {\n    try {\n      var _wsRef$current0;\n      const stream = await navigator.mediaDevices.getDisplayMedia({\n        video: true\n      });\n      screenStreamRef.current = stream;\n      setIsScreenSharing(true);\n      if (((_wsRef$current0 = wsRef.current) === null || _wsRef$current0 === void 0 ? void 0 : _wsRef$current0.readyState) === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'screen_share_start',\n          userId: localStorage.getItem('userId')\n        }));\n      }\n    } catch (error) {\n      console.error('Error sharing screen:', error);\n    }\n  };\n  const stopScreenShare = () => {\n    if (screenStreamRef.current) {\n      var _wsRef$current1;\n      screenStreamRef.current.getTracks().forEach(track => track.stop());\n      screenStreamRef.current = null;\n      setIsScreenSharing(false);\n      if (((_wsRef$current1 = wsRef.current) === null || _wsRef$current1 === void 0 ? void 0 : _wsRef$current1.readyState) === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'screen_share_stop',\n          userId: localStorage.getItem('userId')\n        }));\n      }\n    }\n  };\n  const playAudio = async audioData => {\n    try {\n      console.log('Starting audio playback...');\n\n      // Convert base64 back to Int16Array\n      const binaryString = atob(audioData);\n      const bytes = new Uint8Array(binaryString.length);\n      for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n      }\n\n      // Convert to Float32Array for Web Audio API\n      const int16Data = new Int16Array(bytes.buffer);\n      const float32Data = new Float32Array(int16Data.length);\n      for (let i = 0; i < int16Data.length; i++) {\n        float32Data[i] = int16Data[i] / 32767.0;\n      }\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const audioBuffer = audioContext.createBuffer(1, float32Data.length, 48000);\n      audioBuffer.getChannelData(0).set(float32Data);\n      const source = audioContext.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(audioContext.destination);\n      source.onended = () => {\n        source.disconnect();\n        audioContext.close();\n      };\n      source.start(0);\n      console.log('Audio playback started');\n    } catch (error) {\n      console.error('Error playing audio:', error);\n    }\n  };\n  const sendWebSocketMessage = message => {\n    var _wsRef$current10;\n    if (((_wsRef$current10 = wsRef.current) === null || _wsRef$current10 === void 0 ? void 0 : _wsRef$current10.readyState) === WebSocket.OPEN) {\n      try {\n        wsRef.current.send(typeof message === 'string' ? message : JSON.stringify(message));\n      } catch (error) {\n        console.error('Error sending WebSocket message:', error);\n      }\n    } else {\n      var _wsRef$current11;\n      console.warn('WebSocket is not in OPEN state. Current state:', (_wsRef$current11 = wsRef.current) === null || _wsRef$current11 === void 0 ? void 0 : _wsRef$current11.readyState);\n    }\n  };\n  const toggleMute = () => {\n    if (mediaStreamRef.current) {\n      const audioTrack = mediaStreamRef.current.getAudioTracks()[0];\n      audioTrack.enabled = !audioTrack.enabled;\n      setIsMuted(!isMuted);\n      sendWebSocketMessage({\n        type: 'mute_state',\n        isMuted: !audioTrack.enabled\n      });\n    }\n  };\n  const toggleDeafen = () => {\n    setIsDeafened(!isDeafened);\n    if (audioContextRef.current) {\n      const gainNode = audioContextRef.current.createGain();\n      gainNode.gain.value = isDeafened ? volume / 100 : 0;\n    }\n    sendWebSocketMessage({\n      type: 'deafen_state',\n      isDeafened: !isDeafened\n    });\n  };\n  const toggleVideo = () => {\n    if (isVideoEnabled) {\n      stopVideoStream();\n    } else {\n      startVideoStream();\n    }\n    sendWebSocketMessage({\n      type: 'video_state',\n      isEnabled: !isVideoEnabled\n    });\n  };\n  const toggleScreenShare = () => {\n    if (isScreenSharing) {\n      stopScreenShare();\n    } else {\n      startScreenShare();\n    }\n    sendWebSocketMessage({\n      type: 'screen_share_state',\n      isEnabled: !isScreenSharing\n    });\n  };\n  const handleVolumeChange = (event, newValue) => {\n    setVolume(newValue);\n    if (audioContextRef.current && !isDeafened) {\n      audioContextRef.current.destination.volume = newValue / 100;\n    }\n  };\n  useEffect(() => {\n    const handleWebSocketMessage = async event => {\n      try {\n        const data = JSON.parse(event.data);\n        if (data.type === 'audio') {\n          if (!isDeafened) {\n            await playAudio(data.data);\n          }\n        } else if (data.type === 'participants') {\n          setParticipants(data.participants);\n          setIsEchoMode(data.isEchoMode);\n        }\n      } catch (error) {\n        console.error('Error handling WebSocket message:', error);\n      }\n    };\n    if (wsRef.current) {\n      wsRef.current.addEventListener('message', handleWebSocketMessage);\n    }\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.removeEventListener('message', handleWebSocketMessage);\n      }\n    };\n  }, [isDeafened]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100%',\n      bgcolor: 'background.paper'\n    },\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 17\n    }, this), connectionStatus === 'connecting' && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"info\",\n      sx: {\n        mb: 2\n      },\n      children: \"Connecting to voice channel...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 17\n    }, this), isEchoMode && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"info\",\n      sx: {\n        mb: 2\n      },\n      children: \"Echo Mode Active - You are the only participant in this voice channel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      ref: videoContainerRef,\n      sx: {\n        p: 2,\n        display: 'flex',\n        justifyContent: 'center',\n        bgcolor: 'background.default'\n      },\n      children: isVideoEnabled ? /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: localVideoRef,\n        autoPlay: true,\n        muted: true,\n        playsInline: true,\n        style: {\n          width: '100%',\n          maxHeight: '200px',\n          objectFit: 'cover',\n          borderRadius: '8px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        children: \"Camera is disabled\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 578,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      sx: {\n        flex: 1,\n        overflow: 'auto'\n      },\n      children: participants.map(participant => /*#__PURE__*/_jsxDEV(ListItem, {\n        children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n          children: /*#__PURE__*/_jsxDEV(Badge, {\n            overlap: \"circular\",\n            anchorOrigin: {\n              vertical: 'bottom',\n              horizontal: 'right'\n            },\n            badgeContent: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                width: 12,\n                height: 12,\n                borderRadius: '50%',\n                bgcolor: participant.isMuted ? 'error.main' : 'success.main',\n                border: '2px solid',\n                borderColor: 'background.paper'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 616,\n              columnNumber: 37\n            }, this),\n            children: /*#__PURE__*/_jsxDEV(Avatar, {\n              children: participant.username[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 626,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: participant.username,\n          secondary: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              alignItems: 'center',\n              gap: 1\n            },\n            children: [participant.isMuted && /*#__PURE__*/_jsxDEV(MicOffIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 633,\n              columnNumber: 61\n            }, this), participant.isDeafened && /*#__PURE__*/_jsxDEV(HeadsetOffIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 634,\n              columnNumber: 64\n            }, this), participant.isVideoEnabled && /*#__PURE__*/_jsxDEV(VideoIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 635,\n              columnNumber: 68\n            }, this), participant.isScreenSharing && /*#__PURE__*/_jsxDEV(ScreenShareIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 636,\n              columnNumber: 69\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 632,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 25\n        }, this)]\n      }, participant.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 2,\n        borderTop: 1,\n        borderColor: 'divider',\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          gap: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n          title: isMuted ? \"Unmute\" : \"Mute\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: toggleMute,\n            color: isMuted ? \"error\" : \"default\",\n            children: isMuted ? /*#__PURE__*/_jsxDEV(MicOffIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 40\n            }, this) : /*#__PURE__*/_jsxDEV(MicIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 57\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 654,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: isDeafened ? \"Undeafen\" : \"Deafen\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: toggleDeafen,\n            color: isDeafened ? \"error\" : \"default\",\n            children: isDeafened ? /*#__PURE__*/_jsxDEV(HeadsetOffIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 661,\n              columnNumber: 43\n            }, this) : /*#__PURE__*/_jsxDEV(HeadsetIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 661,\n              columnNumber: 64\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 660,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          gap: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n          title: isVideoEnabled ? \"Disable Video\" : \"Enable Video\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: toggleVideo,\n            color: isVideoEnabled ? \"primary\" : \"default\",\n            children: isVideoEnabled ? /*#__PURE__*/_jsxDEV(VideoIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 47\n            }, this) : /*#__PURE__*/_jsxDEV(VideoOffIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 63\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 668,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: isScreenSharing ? \"Stop Sharing\" : \"Share Screen\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: toggleScreenShare,\n            color: isScreenSharing ? \"primary\" : \"default\",\n            children: /*#__PURE__*/_jsxDEV(ScreenShareIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 674,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 673,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: 1,\n          minWidth: 200\n        },\n        children: [/*#__PURE__*/_jsxDEV(VolumeUpIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Slider, {\n          value: volume,\n          onChange: handleVolumeChange,\n          \"aria-labelledby\": \"volume-slider\",\n          min: 0,\n          max: 100\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 645,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 552,\n    columnNumber: 9\n  }, this);\n};\n_s(VoiceChannel, \"hq+WeBu/gAAEVJl48awIuMLBGxo=\", false, function () {\n  return [useAuth];\n});\n_c = VoiceChannel;\nexport default VoiceChannel;\nvar _c;\n$RefreshReg$(_c, \"VoiceChannel\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Box","Button","Typography","IconButton","Paper","Avatar","List","ListItem","ListItemAvatar","ListItemText","Slider","Tooltip","Badge","Divider","Alert","Mic","MicIcon","MicOff","MicOffIcon","VolumeUp","VolumeUpIcon","VolumeOff","VolumeOffIcon","Headset","HeadsetIcon","HeadsetOff","HeadsetOffIcon","Settings","SettingsIcon","ScreenShare","ScreenShareIcon","Videocam","VideoIcon","VideocamOff","VideoOffIcon","MoreVert","MoreVertIcon","useAuth","config","jsxDEV","_jsxDEV","VoiceChannel","channelId","_s","token","isConnected","setIsConnected","isMuted","setIsMuted","isDeafened","setIsDeafened","isVideoEnabled","setIsVideoEnabled","isScreenSharing","setIsScreenSharing","participants","setParticipants","volume","setVolume","showSettings","setShowSettings","connectionStatus","setConnectionStatus","error","setError","isEchoMode","setIsEchoMode","audioStream","setAudioStream","audioContext","setAudioContext","audioProcessor","setAudioProcessor","wsRef","mediaStreamRef","audioContextRef","mediaRecorderRef","videoStreamRef","screenStreamRef","videoContainerRef","localVideoRef","connect","disconnect","wsProtocol","window","location","protocol","wsUrl","SERVER_IP","SERVER_PORT","encodeURIComponent","console","log","current","close","WebSocket","connectionTimeout","setTimeout","_wsRef$current","readyState","OPEN","_wsRef$current2","pingInterval","setInterval","_wsRef$current3","send","JSON","stringify","type","healthCheckInterval","_wsRef$current4","reconnect","onopen","clearTimeout","_wsRef$current5","startAudioStream","onclose","event","code","reason","clearInterval","stopAudioStream","stopVideoStream","stopScreenShare","onerror","onmessage","data","Blob","size","playAudio","parse","handleWebSocketMessage","prev","participant","filter","p","id","userId","_wsRef$current6","stream","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","autoGainControl","sampleRate","channelCount","getAudioTracks","label","AudioContext","webkitAudioContext","source","createMediaStreamSource","processor","createScriptProcessor","destination","onaudioprocess","e","_wsRef$current7","inputData","inputBuffer","getChannelData","pcmData","Int16Array","length","i","Math","max","min","round","base64Data","btoa","String","fromCharCode","apply","Uint8Array","buffer","stop","getTracks","forEach","track","startVideoStream","_wsRef$current8","video","width","ideal","height","facingMode","getVideoTracks","localStorage","getItem","srcObject","_wsRef$current9","startScreenShare","_wsRef$current0","getDisplayMedia","_wsRef$current1","audioData","binaryString","atob","bytes","charCodeAt","int16Data","float32Data","Float32Array","audioBuffer","createBuffer","set","createBufferSource","onended","start","sendWebSocketMessage","message","_wsRef$current10","_wsRef$current11","warn","toggleMute","audioTrack","enabled","toggleDeafen","gainNode","createGain","gain","value","toggleVideo","isEnabled","toggleScreenShare","handleVolumeChange","newValue","addEventListener","removeEventListener","sx","display","flexDirection","bgcolor","children","severity","mb","fileName","_jsxFileName","lineNumber","columnNumber","ref","justifyContent","autoPlay","muted","playsInline","style","maxHeight","objectFit","borderRadius","variant","color","flex","overflow","map","overlap","anchorOrigin","vertical","horizontal","badgeContent","border","borderColor","username","primary","secondary","alignItems","gap","fontSize","borderTop","title","onClick","minWidth","onChange","_c","$RefreshReg$"],"sources":["C:/Users/skyki/PycharmProjects/musiceblya228/src/components/VoiceChannel.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Typography,\r\n    IconButton,\r\n    Paper,\r\n    Avatar,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    Slider,\r\n    Tooltip,\r\n    Badge,\r\n    Divider,\r\n    Alert\r\n} from '@mui/material';\r\nimport {\r\n    Mic as MicIcon,\r\n    MicOff as MicOffIcon,\r\n    VolumeUp as VolumeUpIcon,\r\n    VolumeOff as VolumeOffIcon,\r\n    Headset as HeadsetIcon,\r\n    HeadsetOff as HeadsetOffIcon,\r\n    Settings as SettingsIcon,\r\n    ScreenShare as ScreenShareIcon,\r\n    Videocam as VideoIcon,\r\n    VideocamOff as VideoOffIcon,\r\n    MoreVert as MoreVertIcon\r\n} from '@mui/icons-material';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport config from '../config';\r\n\r\nconst VoiceChannel = ({ channelId }) => {\r\n    const { token } = useAuth();\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const [isMuted, setIsMuted] = useState(false);\r\n    const [isDeafened, setIsDeafened] = useState(false);\r\n    const [isVideoEnabled, setIsVideoEnabled] = useState(false);\r\n    const [isScreenSharing, setIsScreenSharing] = useState(false);\r\n    const [participants, setParticipants] = useState([]);\r\n    const [volume, setVolume] = useState(100);\r\n    const [showSettings, setShowSettings] = useState(false);\r\n    const [connectionStatus, setConnectionStatus] = useState('disconnected'); // 'disconnected', 'connecting', 'connected'\r\n    const [error, setError] = useState('');\r\n    const [isEchoMode, setIsEchoMode] = useState(false);\r\n    \r\n    // Add new state variables for audio handling\r\n    const [audioStream, setAudioStream] = useState(null);\r\n    const [audioContext, setAudioContext] = useState(null);\r\n    const [audioProcessor, setAudioProcessor] = useState(null);\r\n    \r\n    const wsRef = useRef(null);\r\n    const mediaStreamRef = useRef(null);\r\n    const audioContextRef = useRef(null);\r\n    const mediaRecorderRef = useRef(null);\r\n    const videoStreamRef = useRef(null);\r\n    const screenStreamRef = useRef(null);\r\n    const videoContainerRef = useRef(null);\r\n    const localVideoRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        connect();\r\n        return () => {\r\n            disconnect();\r\n        };\r\n    }, [channelId]); // Reconnect when channel changes\r\n\r\n    const connect = async () => {\r\n        try {\r\n            setConnectionStatus('connecting');\r\n            setError('');\r\n\r\n            // Get the WebSocket protocol based on the current protocol\r\n            const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n            const wsUrl = `${wsProtocol}//${config.SERVER_IP}:${config.SERVER_PORT}/ws/voice/${channelId}?token=${encodeURIComponent(token)}`;\r\n            \r\n            console.log('Connecting to WebSocket:', wsUrl);\r\n            \r\n            // Close existing connection if any\r\n            if (wsRef.current) {\r\n                wsRef.current.close();\r\n            }\r\n            \r\n            wsRef.current = new WebSocket(wsUrl);\r\n\r\n            // Set connection timeout\r\n            const connectionTimeout = setTimeout(() => {\r\n                if (wsRef.current?.readyState !== WebSocket.OPEN) {\r\n                    console.error('WebSocket connection timeout');\r\n                    setError('Connection timeout. Please try again.');\r\n                    wsRef.current?.close();\r\n                }\r\n            }, 5000);\r\n\r\n            // Set up ping interval to keep connection alive\r\n            const pingInterval = setInterval(() => {\r\n                if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n                    try {\r\n                        wsRef.current.send(JSON.stringify({ type: 'ping' }));\r\n                        console.log('Sent ping message');\r\n                    } catch (error) {\r\n                        console.error('Error sending ping:', error);\r\n                    }\r\n                }\r\n            }, 15000);\r\n\r\n            // Set up connection health check\r\n            const healthCheckInterval = setInterval(() => {\r\n                if (wsRef.current?.readyState !== WebSocket.OPEN) {\r\n                    console.log('Connection health check failed, attempting to reconnect...');\r\n                    reconnect();\r\n                }\r\n            }, 30000);\r\n\r\n            wsRef.current.onopen = async () => {\r\n                console.log('WebSocket connected successfully');\r\n                clearTimeout(connectionTimeout);\r\n                setConnectionStatus('connected');\r\n                setIsConnected(true);\r\n                \r\n                // Send join message to server\r\n                try {\r\n                    if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n                        wsRef.current.send(JSON.stringify({\r\n                            type: 'join'\r\n                        }));\r\n                        console.log('Sent join message');\r\n                        \r\n                        // Start audio stream after successful connection\r\n                        await startAudioStream();\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error sending join message:', error);\r\n                    setError('Failed to join voice channel. Please try again.');\r\n                    disconnect();\r\n                }\r\n            };\r\n\r\n            wsRef.current.onclose = (event) => {\r\n                console.log('WebSocket closed:', event.code, event.reason);\r\n                clearTimeout(connectionTimeout);\r\n                clearInterval(pingInterval);\r\n                clearInterval(healthCheckInterval);\r\n                setConnectionStatus('disconnected');\r\n                setIsConnected(false);\r\n                stopAudioStream();\r\n                stopVideoStream();\r\n                stopScreenShare();\r\n                \r\n                // Handle specific error codes\r\n                switch (event.code) {\r\n                    case 4000:\r\n                        setError('Authentication failed. Please log in again.');\r\n                        break;\r\n                    case 4001:\r\n                        setError('Invalid voice channel.');\r\n                        break;\r\n                    case 4002:\r\n                        setError('You are not a member of this server.');\r\n                        break;\r\n                    case 4003:\r\n                        setError('User not found. Please log in again.');\r\n                        break;\r\n                    case 1006:\r\n                        setError('Connection lost. Attempting to reconnect...');\r\n                        reconnect();\r\n                        break;\r\n                    default:\r\n                        setError(`Connection closed: ${event.reason || 'Unknown error'}`);\r\n                        // Try to reconnect if the connection was lost\r\n                        if (event.code !== 1000) {\r\n                            reconnect();\r\n                        }\r\n                }\r\n            };\r\n\r\n            wsRef.current.onerror = (error) => {\r\n                console.error('WebSocket error:', error);\r\n                // Don't clear intervals or disconnect on error\r\n                // Let the onclose handler handle the cleanup\r\n            };\r\n\r\n            wsRef.current.onmessage = async (event) => {\r\n                if (event.data instanceof Blob) {\r\n                    try {\r\n                        console.log('Received audio data blob, size:', event.data.size);\r\n                        await playAudio(event.data);\r\n                    } catch (error) {\r\n                        console.error('Error processing audio data:', error);\r\n                    }\r\n                } else {\r\n                    try {\r\n                        const data = JSON.parse(event.data);\r\n                        console.log('Received WebSocket message:', data);\r\n                        \r\n                        if (data.type === 'ping') {\r\n                            try {\r\n                                wsRef.current.send(JSON.stringify({ type: 'pong' }));\r\n                                console.log('Sent pong response');\r\n                            } catch (error) {\r\n                                console.error('Error sending pong:', error);\r\n                            }\r\n                            return;\r\n                        }\r\n                        \r\n                        handleWebSocketMessage(data);\r\n                    } catch (error) {\r\n                        console.error('Error parsing WebSocket message:', error);\r\n                    }\r\n                }\r\n            };\r\n        } catch (error) {\r\n            console.error('Error connecting to voice channel:', error);\r\n            setError('Failed to connect to voice channel. Please try again later.');\r\n            setConnectionStatus('disconnected');\r\n        }\r\n    };\r\n\r\n    const handleWebSocketMessage = (data) => {\r\n        switch (data.type) {\r\n            case 'participants':\r\n                setParticipants(data.participants);\r\n                setIsEchoMode(data.isEchoMode);\r\n                break;\r\n            case 'participant_joined':\r\n                setParticipants(prev => [...prev, data.participant]);\r\n                setIsEchoMode(data.isEchoMode);\r\n                break;\r\n            case 'participant_left':\r\n                setParticipants(prev => prev.filter(p => p.id !== data.userId));\r\n                setIsEchoMode(data.isEchoMode);\r\n                break;\r\n            default:\r\n                console.log('Unknown message type:', data.type);\r\n        }\r\n    };\r\n\r\n    const reconnect = () => {\r\n        console.log('Attempting to reconnect...');\r\n        setTimeout(() => {\r\n            if (wsRef.current?.readyState !== WebSocket.OPEN) {\r\n                connect();\r\n            }\r\n        }, 3000);\r\n    };\r\n\r\n    const disconnect = () => {\r\n        if (wsRef.current) {\r\n            // Send leave message before closing\r\n            if (wsRef.current.readyState === WebSocket.OPEN) {\r\n                try {\r\n                    wsRef.current.send(JSON.stringify({\r\n                        type: 'leave'\r\n                    }));\r\n                } catch (error) {\r\n                    console.error('Error sending leave message:', error);\r\n                }\r\n            }\r\n            wsRef.current.close();\r\n            wsRef.current = null;\r\n        }\r\n        stopAudioStream();\r\n        stopVideoStream();\r\n        stopScreenShare();\r\n        setIsConnected(false);\r\n    };\r\n\r\n    const startAudioStream = async () => {\r\n        try {\r\n            console.log('Starting audio stream...');\r\n            const stream = await navigator.mediaDevices.getUserMedia({\r\n                audio: {\r\n                    echoCancellation: true,\r\n                    noiseSuppression: true,\r\n                    autoGainControl: true,\r\n                    sampleRate: 48000,\r\n                    channelCount: 1\r\n                }\r\n            });\r\n            console.log('Got media stream:', stream.getAudioTracks()[0].label);\r\n\r\n            const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n            const source = audioContext.createMediaStreamSource(stream);\r\n            const processor = audioContext.createScriptProcessor(1024, 1, 1);\r\n\r\n            source.connect(processor);\r\n            processor.connect(audioContext.destination);\r\n\r\n            processor.onaudioprocess = (e) => {\r\n                if (!isMuted && wsRef.current?.readyState === WebSocket.OPEN) {\r\n                    const inputData = e.inputBuffer.getChannelData(0);\r\n                    // Convert Float32Array to Int16Array for better compatibility\r\n                    const pcmData = new Int16Array(inputData.length);\r\n                    for (let i = 0; i < inputData.length; i++) {\r\n                        pcmData[i] = Math.max(-32768, Math.min(32767, Math.round(inputData[i] * 32767)));\r\n                    }\r\n                    \r\n                    // Convert to base64\r\n                    const base64Data = btoa(String.fromCharCode.apply(null, new Uint8Array(pcmData.buffer)));\r\n                    \r\n                    wsRef.current.send(JSON.stringify({\r\n                        type: 'audio',\r\n                        data: base64Data\r\n                    }));\r\n                }\r\n            };\r\n\r\n            setAudioStream(stream);\r\n            setAudioContext(audioContext);\r\n            setAudioProcessor(processor);\r\n        } catch (error) {\r\n            console.error('Error starting audio stream:', error);\r\n            setError('Failed to access microphone. Please make sure you have granted microphone permissions.');\r\n        }\r\n    };\r\n\r\n    const stopAudioStream = () => {\r\n        if (mediaRecorderRef.current) {\r\n            mediaRecorderRef.current.stop();\r\n            mediaRecorderRef.current = null;\r\n        }\r\n        if (mediaStreamRef.current) {\r\n            mediaStreamRef.current.getTracks().forEach(track => track.stop());\r\n            mediaStreamRef.current = null;\r\n        }\r\n    };\r\n\r\n    const startVideoStream = async () => {\r\n        try {\r\n            // Request both video and audio to ensure we have the right permissions\r\n            const stream = await navigator.mediaDevices.getUserMedia({ \r\n                video: {\r\n                    width: { ideal: 1280 },\r\n                    height: { ideal: 720 },\r\n                    facingMode: 'user'\r\n                },\r\n                audio: true \r\n            });\r\n            \r\n            console.log('Video stream started:', stream.getVideoTracks()[0].label);\r\n            videoStreamRef.current = stream;\r\n            setIsVideoEnabled(true);\r\n            \r\n            // Send video stream to other participants\r\n            if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n                wsRef.current.send(JSON.stringify({\r\n                    type: 'video_start',\r\n                    userId: localStorage.getItem('userId')\r\n                }));\r\n            }\r\n\r\n            // Set the stream to the video element\r\n            if (localVideoRef.current) {\r\n                localVideoRef.current.srcObject = stream;\r\n            }\r\n        } catch (error) {\r\n            console.error('Error accessing camera:', error);\r\n            setError('Failed to access camera. Please make sure you have granted camera permissions.');\r\n            setIsVideoEnabled(false);\r\n        }\r\n    };\r\n\r\n    const stopVideoStream = () => {\r\n        if (videoStreamRef.current) {\r\n            videoStreamRef.current.getTracks().forEach(track => track.stop());\r\n            videoStreamRef.current = null;\r\n            setIsVideoEnabled(false);\r\n            \r\n            if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n                wsRef.current.send(JSON.stringify({\r\n                    type: 'video_stop',\r\n                    userId: localStorage.getItem('userId')\r\n                }));\r\n            }\r\n\r\n            // Clear the video stream\r\n            if (localVideoRef.current) {\r\n                localVideoRef.current.srcObject = null;\r\n            }\r\n        }\r\n    };\r\n\r\n    const startScreenShare = async () => {\r\n        try {\r\n            const stream = await navigator.mediaDevices.getDisplayMedia({ video: true });\r\n            screenStreamRef.current = stream;\r\n            setIsScreenSharing(true);\r\n            \r\n            if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n                wsRef.current.send(JSON.stringify({\r\n                    type: 'screen_share_start',\r\n                    userId: localStorage.getItem('userId')\r\n                }));\r\n            }\r\n        } catch (error) {\r\n            console.error('Error sharing screen:', error);\r\n        }\r\n    };\r\n\r\n    const stopScreenShare = () => {\r\n        if (screenStreamRef.current) {\r\n            screenStreamRef.current.getTracks().forEach(track => track.stop());\r\n            screenStreamRef.current = null;\r\n            setIsScreenSharing(false);\r\n            \r\n            if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n                wsRef.current.send(JSON.stringify({\r\n                    type: 'screen_share_stop',\r\n                    userId: localStorage.getItem('userId')\r\n                }));\r\n            }\r\n        }\r\n    };\r\n\r\n    const playAudio = async (audioData) => {\r\n        try {\r\n            console.log('Starting audio playback...');\r\n            \r\n            // Convert base64 back to Int16Array\r\n            const binaryString = atob(audioData);\r\n            const bytes = new Uint8Array(binaryString.length);\r\n            for (let i = 0; i < binaryString.length; i++) {\r\n                bytes[i] = binaryString.charCodeAt(i);\r\n            }\r\n            \r\n            // Convert to Float32Array for Web Audio API\r\n            const int16Data = new Int16Array(bytes.buffer);\r\n            const float32Data = new Float32Array(int16Data.length);\r\n            for (let i = 0; i < int16Data.length; i++) {\r\n                float32Data[i] = int16Data[i] / 32767.0;\r\n            }\r\n            \r\n            const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n            const audioBuffer = audioContext.createBuffer(1, float32Data.length, 48000);\r\n            audioBuffer.getChannelData(0).set(float32Data);\r\n            \r\n            const source = audioContext.createBufferSource();\r\n            source.buffer = audioBuffer;\r\n            source.connect(audioContext.destination);\r\n            \r\n            source.onended = () => {\r\n                source.disconnect();\r\n                audioContext.close();\r\n            };\r\n            \r\n            source.start(0);\r\n            console.log('Audio playback started');\r\n        } catch (error) {\r\n            console.error('Error playing audio:', error);\r\n        }\r\n    };\r\n\r\n    const sendWebSocketMessage = (message) => {\r\n        if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n            try {\r\n                wsRef.current.send(typeof message === 'string' ? message : JSON.stringify(message));\r\n            } catch (error) {\r\n                console.error('Error sending WebSocket message:', error);\r\n            }\r\n        } else {\r\n            console.warn('WebSocket is not in OPEN state. Current state:', wsRef.current?.readyState);\r\n        }\r\n    };\r\n\r\n    const toggleMute = () => {\r\n        if (mediaStreamRef.current) {\r\n            const audioTrack = mediaStreamRef.current.getAudioTracks()[0];\r\n            audioTrack.enabled = !audioTrack.enabled;\r\n            setIsMuted(!isMuted);\r\n            sendWebSocketMessage({\r\n                type: 'mute_state',\r\n                isMuted: !audioTrack.enabled\r\n            });\r\n        }\r\n    };\r\n\r\n    const toggleDeafen = () => {\r\n        setIsDeafened(!isDeafened);\r\n        if (audioContextRef.current) {\r\n            const gainNode = audioContextRef.current.createGain();\r\n            gainNode.gain.value = isDeafened ? volume / 100 : 0;\r\n        }\r\n        sendWebSocketMessage({\r\n            type: 'deafen_state',\r\n            isDeafened: !isDeafened\r\n        });\r\n    };\r\n\r\n    const toggleVideo = () => {\r\n        if (isVideoEnabled) {\r\n            stopVideoStream();\r\n        } else {\r\n            startVideoStream();\r\n        }\r\n        sendWebSocketMessage({\r\n            type: 'video_state',\r\n            isEnabled: !isVideoEnabled\r\n        });\r\n    };\r\n\r\n    const toggleScreenShare = () => {\r\n        if (isScreenSharing) {\r\n            stopScreenShare();\r\n        } else {\r\n            startScreenShare();\r\n        }\r\n        sendWebSocketMessage({\r\n            type: 'screen_share_state',\r\n            isEnabled: !isScreenSharing\r\n        });\r\n    };\r\n\r\n    const handleVolumeChange = (event, newValue) => {\r\n        setVolume(newValue);\r\n        if (audioContextRef.current && !isDeafened) {\r\n            audioContextRef.current.destination.volume = newValue / 100;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleWebSocketMessage = async (event) => {\r\n            try {\r\n                const data = JSON.parse(event.data);\r\n                \r\n                if (data.type === 'audio') {\r\n                    if (!isDeafened) {\r\n                        await playAudio(data.data);\r\n                    }\r\n                } else if (data.type === 'participants') {\r\n                    setParticipants(data.participants);\r\n                    setIsEchoMode(data.isEchoMode);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error handling WebSocket message:', error);\r\n            }\r\n        };\r\n\r\n        if (wsRef.current) {\r\n            wsRef.current.addEventListener('message', handleWebSocketMessage);\r\n        }\r\n\r\n        return () => {\r\n            if (wsRef.current) {\r\n                wsRef.current.removeEventListener('message', handleWebSocketMessage);\r\n            }\r\n        };\r\n    }, [isDeafened]);\r\n\r\n    return (\r\n        <Box sx={{ \r\n            display: 'flex', \r\n            flexDirection: 'column',\r\n            height: '100%',\r\n            bgcolor: 'background.paper'\r\n        }}>\r\n            {/* Connection Status */}\r\n            {error && (\r\n                <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                    {error}\r\n                </Alert>\r\n            )}\r\n            \r\n            {connectionStatus === 'connecting' && (\r\n                <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                    Connecting to voice channel...\r\n                </Alert>\r\n            )}\r\n\r\n            {isEchoMode && (\r\n                <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                    Echo Mode Active - You are the only participant in this voice channel\r\n                </Alert>\r\n            )}\r\n\r\n            {/* Video Container */}\r\n            <Box \r\n                ref={videoContainerRef}\r\n                sx={{ \r\n                    p: 2, \r\n                    display: 'flex', \r\n                    justifyContent: 'center',\r\n                    bgcolor: 'background.default'\r\n                }}\r\n            >\r\n                {isVideoEnabled ? (\r\n                    <video\r\n                        ref={localVideoRef}\r\n                        autoPlay\r\n                        muted\r\n                        playsInline\r\n                        style={{\r\n                            width: '100%',\r\n                            maxHeight: '200px',\r\n                            objectFit: 'cover',\r\n                            borderRadius: '8px'\r\n                        }}\r\n                    />\r\n                ) : (\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Camera is disabled\r\n                    </Typography>\r\n                )}\r\n            </Box>\r\n\r\n            {/* Participants List */}\r\n            <List sx={{ flex: 1, overflow: 'auto' }}>\r\n                {participants.map((participant) => (\r\n                    <ListItem key={participant.id}>\r\n                        <ListItemAvatar>\r\n                            <Badge\r\n                                overlap=\"circular\"\r\n                                anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n                                badgeContent={\r\n                                    <Box sx={{ \r\n                                        width: 12, \r\n                                        height: 12, \r\n                                        borderRadius: '50%',\r\n                                        bgcolor: participant.isMuted ? 'error.main' : 'success.main',\r\n                                        border: '2px solid',\r\n                                        borderColor: 'background.paper'\r\n                                    }} />\r\n                                }\r\n                            >\r\n                                <Avatar>{participant.username[0]}</Avatar>\r\n                            </Badge>\r\n                        </ListItemAvatar>\r\n                        <ListItemText \r\n                            primary={participant.username}\r\n                            secondary={\r\n                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                                    {participant.isMuted && <MicOffIcon fontSize=\"small\" />}\r\n                                    {participant.isDeafened && <HeadsetOffIcon fontSize=\"small\" />}\r\n                                    {participant.isVideoEnabled && <VideoIcon fontSize=\"small\" />}\r\n                                    {participant.isScreenSharing && <ScreenShareIcon fontSize=\"small\" />}\r\n                                </Box>\r\n                            }\r\n                        />\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n\r\n            {/* Controls */}\r\n            <Box sx={{ \r\n                p: 2, \r\n                borderTop: 1, \r\n                borderColor: 'divider',\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center'\r\n            }}>\r\n                <Box sx={{ display: 'flex', gap: 1 }}>\r\n                    <Tooltip title={isMuted ? \"Unmute\" : \"Mute\"}>\r\n                        <IconButton onClick={toggleMute} color={isMuted ? \"error\" : \"default\"}>\r\n                            {isMuted ? <MicOffIcon /> : <MicIcon />}\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title={isDeafened ? \"Undeafen\" : \"Deafen\"}>\r\n                        <IconButton onClick={toggleDeafen} color={isDeafened ? \"error\" : \"default\"}>\r\n                            {isDeafened ? <HeadsetOffIcon /> : <HeadsetIcon />}\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </Box>\r\n\r\n                <Box sx={{ display: 'flex', gap: 1 }}>\r\n                    <Tooltip title={isVideoEnabled ? \"Disable Video\" : \"Enable Video\"}>\r\n                        <IconButton onClick={toggleVideo} color={isVideoEnabled ? \"primary\" : \"default\"}>\r\n                            {isVideoEnabled ? <VideoIcon /> : <VideoOffIcon />}\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title={isScreenSharing ? \"Stop Sharing\" : \"Share Screen\"}>\r\n                        <IconButton onClick={toggleScreenShare} color={isScreenSharing ? \"primary\" : \"default\"}>\r\n                            <ScreenShareIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </Box>\r\n\r\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, minWidth: 200 }}>\r\n                    <VolumeUpIcon />\r\n                    <Slider\r\n                        value={volume}\r\n                        onChange={handleVolumeChange}\r\n                        aria-labelledby=\"volume-slider\"\r\n                        min={0}\r\n                        max={100}\r\n                    />\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default VoiceChannel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}